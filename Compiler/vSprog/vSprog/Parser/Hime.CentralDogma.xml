<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hime.CentralDogma</name>
    </assembly>
    <members>
        <member name="T:Hime.CentralDogma.Automata.DFA">
            <summary>
            Represents a Deterministic Finite-state Automaton
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.DFA.states">
            <summary>
            The list of states in this automaton
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFA.#ctor">
            <summary>
            Initializes a new (empty DFA)
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFA.#ctor(System.Collections.Generic.List{Hime.CentralDogma.Automata.DFAState})">
            <summary>
            Initializes a DFA with a list of existing states
            </summary>
            <param name="states">Some states</param>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFA.#ctor(Hime.CentralDogma.Automata.NFA)">
            <summary>
            Initializes this dfa as equivalent to the given nfa
            </summary>
            <param name="nfa">A nfa</param>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFA.CreateState">
            <summary>
            Creates a new state in this DFA
            </summary>
            <returns>The create state</returns>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFA.Minimize">
            <summary>
            Gets the minimal automaton equivalent to this ine
            </summary>
            <returns>The minimal DFA</returns>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFA.RepackTransitions">
            <summary>
            Repacks the transitions of all the states in this automaton
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFA.Prune">
            <summary>
            Prunes all the unreachable states from this automaton
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFA.ExtractSubFor(Hime.CentralDogma.Automata.FinalItem)">
            <summary>
            Extracts the sub-DFA that produces the specified final item
            </summary>
            <param name="final">A final item</param>
            <returns>The sub-DFA for the specified item</returns>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFA.ExtractSubTo(Hime.CentralDogma.Automata.DFAState)">
            <summary>
            Extracts the sub-DFA that leads to the specified state
            </summary>
            <param name="state">A state in this DFA</param>
            <returns>The sub-DFA for the specified state</returns>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFA.ExtractSubTo(System.Collections.Generic.IEnumerable{Hime.CentralDogma.Automata.DFAState})">
            <summary>
            Extracts the sub-DFA that leads to any of the specified states
            </summary>
            <param name="targets">States in this DFA</param>
            <returns>The sub-DFA for the specified states</returns>
        </member>
        <member name="P:Hime.CentralDogma.Automata.DFA.States">
            <summary>
            Gets the states in this automaton
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Automata.DFA.StatesCount">
            <summary>
            Gets the number of states in this automaton
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Automata.DFA.Entry">
            <summary>
            Gets the entry state of this automaton
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Automata.DFAInverse">
            <summary>
            Represents the inverse graph of a DFA
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.DFAInverse.reachable">
            <summary>
            The reachable states
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.DFAInverse.inverses">
            <summary>
            The inverse graph data
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.DFAInverse.finals">
            <summary>
            The final states
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFAInverse.#ctor(Hime.CentralDogma.Automata.DFA)">
            <summary>
            Builds this inverse graph from the specified DFA
            </summary>
            <param name="dfa">A DFA</param>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFAInverse.CloseByAntecedents(System.Collections.Generic.IEnumerable{Hime.CentralDogma.Automata.DFAState})">
            <summary>
            Closes the specified list of states through inverse transitions
            </summary>
            <param name="states">The list of states to close</param>
            <returns>The closure</returns>
        </member>
        <member name="P:Hime.CentralDogma.Automata.DFAInverse.Reachable">
            <summary>
            Gets the reachable states of the DFA
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Automata.DFAInverse.Inverses">
            <summary>
            Gets the inverse transitions
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Automata.DFAInverse.Finals">
            <summary>
            Gets the final states of the original DFA
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Automata.DFAPartition">
            <summary>
            Represents a partition of a DFA
            This is used to compute minimal DFAs
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.DFAPartition.groups">
            <summary>
            The groups in this partition
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFAPartition.#ctor">
            <summary>
            Initializes this partition
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFAPartition.#ctor(Hime.CentralDogma.Automata.DFA)">
            <summary>
            Initializes this partition as the first partition of the given DFA
            The first partition is according to final, non-final states
            </summary>
            <param name="dfa">A dfa</param>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFAPartition.DFAPartition_SameFinals(Hime.CentralDogma.Automata.DFAState,Hime.CentralDogma.Automata.DFAState)">
            <summary>
            Determines if the two states have the same marks
            </summary>
            <param name="left">The left state</param>
            <param name="right">The right state</param>
            <returns>True if the two states have the same marks</returns>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFAPartition.Refine">
            <summary>
            Refines this partition into another one
            </summary>
            <returns>The refined partition</returns>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFAPartition.AddState(Hime.CentralDogma.Automata.DFAState,Hime.CentralDogma.Automata.DFAPartition)">
            <summary>
            Adds a state to this partition, coming from the given old partition
            </summary>
            <param name="state">The state to add</param>
            <param name="old">The old partition</param>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFAPartition.AddState_SameGroup(Hime.CentralDogma.Automata.DFAState,Hime.CentralDogma.Automata.DFAState,Hime.CentralDogma.Automata.DFAPartition)">
            <summary>
            Determines whether two states should be in the same group
            </summary>
            <param name="s1">A state</param>
            <param name="s2">Another state</param>
            <param name="old">The old partition</param>
            <returns></returns>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFAPartition.AddState_GetGroupOf(Hime.CentralDogma.Automata.DFAState)">
            <summary>
            Gets the group of the given state in this partition
            </summary>
            <param name="state">A state</param>
            <returns>The corresponding group</returns>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFAPartition.GetDFAStates">
            <summary>
            Gets the new dfa states produced by this partition
            </summary>
            <returns>The dfa states produced by this partition</returns>
        </member>
        <member name="P:Hime.CentralDogma.Automata.DFAPartition.GroupCount">
            <summary>
            Gets the number of groups in this partition
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Automata.DFAState">
            <summary>
            Represents a state in a Deterministic Finite Automaton
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.DFAState.transitions">
            <summary>
            The transitions from this state
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.DFAState.item">
            <summary>
            The top marker for this state
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.DFAState.items">
            <summary>
            The list of the current markers for this state
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.DFAState.id">
            <summary>
            This state's id
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFAState.#ctor(System.Int32)">
            <summary>
            Initialize this state
            </summary>
            <param name="id">Identifier for this state</param>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFAState.AddFinal(Hime.CentralDogma.Automata.FinalItem)">
            <summary>
            Adds a new marker making this state a final state
            </summary>
            <param name="item">The new marker</param>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFAState.AddFinals(System.Collections.Generic.IEnumerable{Hime.CentralDogma.Automata.FinalItem})">
            <summary>
            Adds new markers making this state a final state
            </summary>
            <param name="items">The new markers</param>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFAState.ClearFinals">
            <summary>
            Clears all markers for this states making it non-final
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFAState.GetChildBy(Hime.CentralDogma.CharSpan)">
            <summary>
            Gets the child state by the specified transition
            </summary>
            <param name="value">The value on the transition</param>
            <returns>The child state</returns>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFAState.HasTransition(Hime.CentralDogma.CharSpan)">
            <summary>
            Determines whether this state has the specified transition
            </summary>
            <param name="value">The value on the transition</param>
            <returns><c>true</c> if this state has the specified transition; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFAState.AddTransition(Hime.CentralDogma.CharSpan,Hime.CentralDogma.Automata.DFAState)">
            <summary>
            Adds a transition from this state
            </summary>
            <param name="value">The value on the transition</param>
            <param name="next">The next state by the transition</param>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFAState.RemoveTransition(Hime.CentralDogma.CharSpan)">
            <summary>
            Removes a transition from this state
            </summary>
            <param name="value">The value on the transition</param>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFAState.ClearTransitions">
            <summary>
            Removes all the transitions from this state
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFAState.RepackTransitions">
            <summary>
            Repacks all the transitions from this state to remove overlaps between the transitions' values
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Automata.DFAState.TopItem">
            <summary>
            Gets the top marker for this state
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Automata.DFAState.Items">
            <summary>
            Gets the list of the markers for this state
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Automata.DFAState.Transitions">
            <summary>
            Gets the transitions from this state
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Automata.DFAState.Children">
            <summary>
            Gets the children of this state, i.e. states that are reached by a single transition from this one
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Automata.DFAState.ID">
            <summary>
            Gets the ID of this state
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Automata.DFAStateGroup">
            <summary>
            Represents a group of DFA states within a partition
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.DFAStateGroup.states">
            <summary>
            The states in this group
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFAStateGroup.#ctor(Hime.CentralDogma.Automata.DFAState)">
            <summary>
            Initializes this group with a representative state
            </summary>
            <param name="init">The representative state</param>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFAStateGroup.AddState(Hime.CentralDogma.Automata.DFAState)">
            <summary>
            Adds a state to this group
            </summary>
            <param name="state">The state to add</param>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFAStateGroup.Split(Hime.CentralDogma.Automata.DFAPartition)">
            <summary>
            Splits the given partition with this group
            </summary>
            <param name="current">The current partition</param>
            <returns>The resulting partition</returns>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DFAStateGroup.Contains(Hime.CentralDogma.Automata.DFAState)">
            <summary>
            Determines whether the given state is in this group
            </summary>
            <param name="state">A state</param>
            <returns>True of the state is in this group</returns>
        </member>
        <member name="P:Hime.CentralDogma.Automata.DFAStateGroup.States">
            <summary>
            Gets the states in this group
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Automata.DFAStateGroup.Representative">
            <summary>
            Gets the representative state of this group
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Automata.DummyItem">
            <summary>
            Represents a fake marker of a final state in an automaton
            </summary>
            <remarks>This class is a singleton</remarks>
        </member>
        <member name="T:Hime.CentralDogma.Automata.FinalItem">
            <summary>
            Represents a marker for the final state of an automaton
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Automata.FinalItem.Priority">
            <summary>
            Gets the priority of this marker
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.DummyItem.instance">
            <summary>
            The single instance
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.DummyItem.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Automata.DummyItem"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Automata.DummyItem"/>.
            </returns>
        </member>
        <member name="P:Hime.CentralDogma.Automata.DummyItem.Instance">
            <summary>
            Gets the single instance
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Automata.DummyItem.Priority">
            <summary>
             Gets the priority of this marker 
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Automata.NFA">
            <summary>
            Represents a Non-deterministic Finite Automaton
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.NFA.states">
            <summary>
            The list of all the states in this automaton
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.NFA.stateEntry">
            <summary>
            The entry state
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.NFA.stateExit">
            <summary>
            The exit state
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.NFA.Epsilon">
            <summary>
            Represents the value epsilon on NFA transtions
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFA.#ctor">
            <summary>
            Initializes an empty automaton (no state)
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFA.#ctor(Hime.CentralDogma.Automata.DFA)">
            <summary>
            Initializes this automaton as a copy of the given DFA
            This automaton will not have an exit state
            </summary>
            <param name="dfa">The DFA to copy</param>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFA.AddNewState">
            <summary>
            Adds a new state to this automaton
            </summary>
            <returns>The new state</returns>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFA.Clone">
            <summary>
            Clones this automaton
            </summary>
            <returns>The cloned automaton</returns>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFA.Clone(System.Boolean)">
            <summary>
            Clones this automaton
            </summary>
            <param name="keepFinals">Whether to keep the marks for the final states</param>
            <returns>The cloned automaton</returns>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFA.InsertSubNFA(Hime.CentralDogma.Automata.NFA)">
            <summary>
            Inserts all the states of the given automaton into this one
            This does not make a copy of the states, this directly includes them
            </summary>
            <param name="sub">Sub-automaton to include in this one</param>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFA.NewMinimal">
            <summary>
            Creates and initializes a minimal automaton with an entry state and a separate exit state
            </summary>
            <returns>The created automaton</returns>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFA.NewOptional(Hime.CentralDogma.Automata.NFA,System.Boolean)">
            <summary>
            Creates an automaton that represents makes the given sub-automaton optional
            </summary>
            <param name="sub">The sub-automaton to make optional</param>
            <param name="useClones">True to completely clone the sub-automaton</param>
            <returns>The new automaton</returns>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFA.NewRepeatZeroMore(Hime.CentralDogma.Automata.NFA,System.Boolean)">
            <summary>
            Creates an automaton that repeats the sub-automaton zero or more times
            </summary>
            <param name="sub">The sub-automaton</param>
            <param name="useClones">True to completely clone the sub-automaton</param>
            <returns>The new automaton</returns>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFA.NewRepeatOneOrMore(Hime.CentralDogma.Automata.NFA,System.Boolean)">
            <summary>
            Creates an automaton that repeats the sub-automaton one or more times
            </summary>
            <param name="sub">The sub-automaton</param>
            <param name="useClones">True to completely clone the sub-automaton</param>
            <returns>The new automaton</returns>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFA.NewRepeatRange(Hime.CentralDogma.Automata.NFA,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates an automaton that repeats the sub-automaton a number of times in the given range [min, max]
            </summary>
            <param name="sub">The sub-automaton</param>
            <param name="useClones">True to completely clone the sub-automaton</param>
            <param name="min">The minimum (included) number of time to repeat</param>
            <param name="max">The maximum (included) number of time to repeat</param>
            <returns>The new automaton</returns>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFA.NewUnion(Hime.CentralDogma.Automata.NFA,Hime.CentralDogma.Automata.NFA,System.Boolean)">
            <summary>
            Creates an automaton that is the union of the two sub-automaton
            </summary>
            <param name="left">The left automaton</param>
            <param name="right">The right automaton</param>
            <param name="useClones">True to completely clone the sub-automata</param>
            <returns>The new automaton</returns>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFA.NewConcatenation(Hime.CentralDogma.Automata.NFA,Hime.CentralDogma.Automata.NFA,System.Boolean)">
            <summary>
            Creates an automaton that concatenates the two sub-automaton
            </summary>
            <param name="left">The left automaton</param>
            <param name="right">The right automaton</param>
            <param name="useClones">True to completely clone the sub-automata</param>
            <returns>The new automaton</returns>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFA.NewDifference(Hime.CentralDogma.Automata.NFA,Hime.CentralDogma.Automata.NFA,System.Boolean)">
            <summary>
            Creates an automaton that is the difference between the left and right sub-automata
            </summary>
            <param name="left">The left automaton</param>
            <param name="right">The right automaton</param>
            <param name="useClones">True to completely clone the sub-automata</param>
            <returns>The new automaton</returns>
        </member>
        <member name="P:Hime.CentralDogma.Automata.NFA.States">
            <summary>
            Gets the collection of states in this automaton
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Automata.NFA.StatesCount">
            <summary>
            Gets the number of states in this automaton
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Automata.NFA.StateEntry">
            <summary>
            Gets or sets the entry set for this automaton
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Automata.NFA.StateExit">
            <summary>
            Gets ot sets the exit state for this automaton
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Automata.NFAState">
            <summary>
            Represents a state in a Non-deterministic Finite Automaton
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.NFAState.transitions">
            <summary>
            The list of transitions
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.NFAState.item">
            <summary>
            The marker whether this state is a final state
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.NFAState.mark">
            <summary>
            The watermark for this state
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFAState.#ctor">
            <summary>
            Initializes this state as a non-final, non-watermarked state
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFAState.AddTransition(Hime.CentralDogma.CharSpan,Hime.CentralDogma.Automata.NFAState)">
            <summary>
            Adds a transition from this state to the given state on the given value
            </summary>
            <param name="value">The new transition's value</param>
            <param name="next">The next state by the new transition</param>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFAState.ClearTransitions">
            <summary>
            Removes all transitions starting from this state
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFAState.ReplaceTransition(System.Int32,Hime.CentralDogma.Automata.NFATransition)">
            <summary>
            Replaces the transition at the given index by the specified one
            </summary>
            <param name="index">An index in the list of transitions</param>
            <param name="transition">The replacing transition</param>
        </member>
        <member name="P:Hime.CentralDogma.Automata.NFAState.Transitions">
            <summary>
            Gets the list of transitions from this state
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Automata.NFAState.Item">
            <summary>
            Gets or sets the item marking this state as a final state
            If the value is null, the state is not final
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Automata.NFAState.Mark">
            <summary>
            Gets or sets the watermark of this state
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Automata.NFAStateSet">
            <summary>
            Represents a set of states in a Non-deterministic Finite Automaton
            A state can only appear once in a set
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.NFAStateSet.backend">
            <summary>
            The backend storage for the states in this set
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFAStateSet.#ctor">
            <summary>
            Initializes this set
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFAStateSet.Add(Hime.CentralDogma.Automata.NFAState)">
            <summary>
            Adds the given state in this set if it is not already present
            </summary>
            <param name="state">The state to add</param>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFAStateSet.AddRange(System.Collections.Generic.IEnumerable{Hime.CentralDogma.Automata.NFAState})">
            <summary>
            Adds the given states in this set if they are not already present
            </summary>
            <param name="states">The states to add</param>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFAStateSet.Close_Normal">
            <summary>
            Closes this set by transitively adding to it all reachable state by the epsilon transition
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFAStateSet.Close">
            <summary>
            Closes this set by transitively adding to it all reachable state by the epsilon transition
            This looks for the watermark of states
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFAStateSet.Normalize">
            <summary>
            Normalizes this set
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFAStateSet.GetTransitions">
            <summary>
            Gets transitions from this set to other sets
            </summary>
            <returns>The transitions from this set to other sets</returns>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFAStateSet.GetFinals">
            <summary>
            Gets all the final markers of all the states in this set
            </summary>
            <returns>The list of all the markers</returns>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFAStateSet.Equals(System.Object)">
            <summary>
            Determines whether the given object is equal to this set
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True of the object is equal to this set</returns>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFAStateSet.GetHashCode">
            <summary>
            Get the hash-code for this set
            </summary>
            <returns>This set's hash-code</returns>
        </member>
        <member name="T:Hime.CentralDogma.Automata.NFATransition">
            <summary>
            Represents a transition in a Non-deterministic Finite Automaton
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.NFATransition.span">
            <summary>
            The value on this transition
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.NFATransition.next">
            <summary>
            The next state by this transition
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.NFATransition.#ctor(Hime.CentralDogma.CharSpan,Hime.CentralDogma.Automata.NFAState)">
            <summary>
            Initializes this transition
            </summary>
            <param name="span">The transition's value</param>
            <param name="next">The next state by this transition</param>
        </member>
        <member name="P:Hime.CentralDogma.Automata.NFATransition.Span">
            <summary>
            Gets the value on this transition
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Automata.NFATransition.Next">
            <summary>
            Gets the next state by this transition
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.CompilationTask">
            <summary>
            Represents a compilation task for the generation of lexers and parsers from grammars
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.CompilationTask.reporter">
            <summary>
            The reporter
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.CompilationTask.loader">
            <summary>
            The loader for this task
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.CompilationTask.#ctor">
            <summary>
            Initializes a new compilation task
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.CompilationTask.#ctor(Hime.CentralDogma.Reporter)">
            <summary>
            Initializes a new compilation task
            </summary>
            <param name="reporter">The reported to use</param>
        </member>
        <member name="M:Hime.CentralDogma.CompilationTask.AddInputFile(System.String)">
            <summary>
            Adds a new file as input
            </summary>
            <param name="file">The input file</param>
        </member>
        <member name="M:Hime.CentralDogma.CompilationTask.AddInputRaw(System.String)">
            <summary>
            Adds a new data string as input
            </summary>
            <param name="data">The data string</param>
        </member>
        <member name="M:Hime.CentralDogma.CompilationTask.AddInputRaw(System.String,System.String)">
            <summary>
            Adds a new named data string as input
            </summary>
            <param name="name">The input's name</param>
            <param name="data">The data string</param>
        </member>
        <member name="M:Hime.CentralDogma.CompilationTask.AddInputRaw(System.IO.Stream)">
            <summary>
            Adds a new data stream as input
            </summary>
            <param name="stream">The input stream</param>
        </member>
        <member name="M:Hime.CentralDogma.CompilationTask.AddInputRaw(System.String,System.IO.Stream)">
            <summary>
            Adds a new named data stream as input
            </summary>
            <param name="name">The input's name</param>
            <param name="stream">The input stream</param>
        </member>
        <member name="M:Hime.CentralDogma.CompilationTask.AddInputRaw(System.IO.TextReader)">
            <summary>
            Adds a new data reader as input
            </summary>
            <param name="reader">The input reader</param>
        </member>
        <member name="M:Hime.CentralDogma.CompilationTask.AddInputRaw(System.String,System.IO.TextReader)">
            <summary>
            Adds a new named data reader as input
            </summary>
            <param name="name">The input's name</param>
            <param name="reader">The input reader</param>
        </member>
        <member name="M:Hime.CentralDogma.CompilationTask.AddInput(Hime.Redist.ASTNode,Hime.Redist.Text)">
            <summary>
            Adds the specified pre-parsed grammar to the inputs
            </summary>
            <param name="node">The parse tree of a grammar</param>
            <param name="input">The input that contains the grammar</param>
        </member>
        <member name="M:Hime.CentralDogma.CompilationTask.Execute">
            <summary>
            Executes this compilation task
            </summary>
            <returns>The compilation report</returns>
        </member>
        <member name="M:Hime.CentralDogma.CompilationTask.ExecuteDo">
            <summary>
            Executes the compilation task
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.CompilationTask.Version">
            <summary>
            Gets the compiler's version
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.CompilationTask.GrammarName">
            <summary>
            Gets or sets the name of the grammar to compile in the case where several grammars are loaded.
            When only one grammar is loaded, it will be automatically selected.
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.CompilationTask.Mode">
            <summary>
            Gets ot sets the compiler's mode
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.CompilationTask.Target">
            <summary>
            Gets or sets the target runtime
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.CompilationTask.OutputPath">
            <summary>
            Gets ot sets the compiler's output files' path.
            If this property is not set, the path will be the current directory.
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.CompilationTask.Namespace">
            <summary>
            Gets or sets the namespace in which the generated Lexer and Parser classes will be put.
            If this property is not set, the namespace will be the name of the grammar.
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.CompilationTask.CodeAccess">
            <summary>
            Gets or sets the access modifiers for the generated Lexer and Parser classes.
            The default value is Internal.
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.CompilationTask.Method">
            <summary>
            Gets or sets the parsing method to use.
            The default value is LALR1.
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.ParsingMethod">
            <summary>
            Represents a parsing method
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.ParsingMethod.LR0">
            <summary>
            The LR(0) parsing method
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.ParsingMethod.LR1">
            <summary>
            The LR(1) parsing method
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.ParsingMethod.LALR1">
            <summary>
            The LALR(1) parsing method
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.ParsingMethod.RNGLR1">
            <summary>
            The RNGLR parsing method based on a LR(1) graph
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.ParsingMethod.RNGLALR1">
            <summary>
            The RNGLR parsing method based on a LALR(1) graph
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.Grammar">
            <summary>
            Represents a grammar
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Grammar.prefixGeneratedTerminal">
            <summary>
            The prefix for the generated terminal names
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Grammar.prefixGeneratedVariable">
            <summary>
            The prefix for the generated variable names
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Grammar.generatedAxiom">
            <summary>
            The name of the generated axiom variable
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Grammar.optionAxiom">
            <summary>
            Name of the grammar option specifying the grammar's axiom variable
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Grammar.optionSeparator">
            <summary>
            Name of the grammar option specifying the grammar's separator terminal
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Grammar.unique">
            <summary>
            The counter for the generation of unique names across multiple grammars
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Grammar.name">
            <summary>
            The grammar's name
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Grammar.nextSID">
            <summary>
            The next unique symbol identifier for this grammar
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Grammar.options">
            <summary>
            The grammar's options
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Grammar.terminalsByName">
            <summary>
            The grammar's terminals, by name
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Grammar.terminalsByValue">
            <summary>
            The grammar's terminals, by value
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Grammar.variables">
            <summary>
            The grammar's variables
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Grammar.virtuals">
            <summary>
            The grammar's virtual symbols
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Grammar.actions">
            <summary>
            The grammar's action symbols
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Grammar.templateRules">
            <summary>
            The grammar's template rules
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.#ctor(System.String)">
            <summary>
            Initializes this grammar
            </summary>
            <param name="name">The grammar's name</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.GenerateID">
            <summary>
            Generates a unique identifier
            </summary>
            <returns>A unique identifier</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.AddOption(System.String,System.String)">
            <summary>
            Adds this grammar an option
            </summary>
            <param name="name">The option's name</param>
            <param name="value">The option's value</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.GetOption(System.String)">
            <summary>
            Gets the value of the given option
            </summary>
            <param name="name">An option's name</param>
            <returns>The option's value, or <c>null</c> if the option is not set</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.GetSymbol(System.String)">
            <summary>
            Gets the symbol with the given name in this grammar
            </summary>
            <param name="name">A symbol's name</param>
            <returns>The corresponding symbol, or <c>null</c> if it does not exists</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.AddTerminalAnon(System.String,Hime.CentralDogma.Automata.NFA)">
            <summary>
            Adds the given anonymous terminal to this grammar
            </summary>
            <param name="value">The terminal's value</param>
            <param name="nfa">The terminal's NFA</param>
            <returns>The new terminal</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.AddTerminalNamed(System.String,Hime.CentralDogma.Automata.NFA)">
            <summary>
            Adds the given named terminal to this grammar
            </summary>
            <param name="name">The terminal's name</param>
            <param name="nfa">The terminal's NFA</param>
            <returns>The new terminal</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.AddTerminal(System.String,System.String,Hime.CentralDogma.Automata.NFA)">
            <summary>
            Adds the given terminal to this grammar
            </summary>
            <param name="name">The terminal's name</param>
            <param name="value">The terminal's value</param>
            <param name="nfa">The terminal's NFA</param>
            <returns>The new terminal</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.GetTerminalByName(System.String)">
            <summary>
            Gets the terminal with the given name
            </summary>
            <param name="name">A terminal's name</param>
            <returns>The corresponding terminal, or <c>null</c> if it does not exists</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.GetTerminalByValue(System.String)">
            <summary>
            Gets the terminal with the given value
            </summary>
            <param name="value">A terminal's value</param>
            <returns>The corresponding terminal, or <c>null</c> if it does not exists</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.GenerateVariable">
            <summary>
            Generates a new variable
            </summary>
            <returns>A new variable</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.AddVariable(System.String)">
            <summary>
            Adds a variable with the given name to this grammar
            </summary>
            <param name="name">The variable's name</param>
            <returns>The new variable</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.GetVariable(System.String)">
            <summary>
            Gets the variable with the given name
            </summary>
            <param name="name">A variable's name</param>
            <returns>The corresponding variable, or <c>null</c> if it does not exists</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.AddVirtual(System.String)">
            <summary>
            Adds a virtual symbol with the given name to this grammar
            </summary>
            <param name="name">The virtual's name</param>
            <returns>The new virtual</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.GetVirtual(System.String)">
            <summary>
            Gets the virtual symbol with the given name
            </summary>
            <param name="name">A virtual's name</param>
            <returns>The corresponding virtual, or <c>null</c> if it does not exists</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.AddAction(System.String)">
            <summary>
            Adds an action symbol with the given name to this grammar
            </summary>
            <param name="name">The action's name</param>
            <returns>The new action</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.GetAction(System.String)">
            <summary>
            Gets the action symbol with the given name
            </summary>
            <param name="name">An action's name</param>
            <returns>The corresponding action, or <c>null</c> if it does not exists</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.AddTemplateRule(Hime.Redist.ASTNode)">
            <summary>
            Adds the template rule to this grammar
            </summary>
            <param name="node">The rule's definition AST</param>
            <returns>The new template rule</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.Inherit(Hime.CentralDogma.Grammars.Grammar)">
            <summary>
            Inherit from the given parent
            </summary>
            <param name="parent">The parent's grammar</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.InheritOptions(Hime.CentralDogma.Grammars.Grammar)">
            <summary>
            Inherits the options from the parent grammar
            </summary>
            <param name="parent">The parent's grammar</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.InheritTerminals(Hime.CentralDogma.Grammars.Grammar,System.Boolean)">
            <summary>
            Inherits the terminals from the parent grammar
            </summary>
            <param name="parent">The parent's grammar</param>
            <param name="doClone">Clone the symbols</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.InheritVariables(Hime.CentralDogma.Grammars.Grammar,System.Boolean)">
            <summary>
            Inherits the variables from the parent grammar
            </summary>
            <param name="parent">The parent's grammar</param>
            <param name="doClone">Clone the symbols</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.InheritVirtuals(Hime.CentralDogma.Grammars.Grammar,System.Boolean)">
            <summary>
            Inherits the virtuals from the parent grammar
            </summary>
            <param name="parent">The parent's grammar</param>
            <param name="doClone">Clone the symbols</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.InheritActions(Hime.CentralDogma.Grammars.Grammar,System.Boolean)">
            <summary>
            Inherits the actions from the parent grammar
            </summary>
            <param name="parent">The parent's grammar</param>
            <param name="doClone">Clone the symbols</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.InheritTemplateRules(Hime.CentralDogma.Grammars.Grammar)">
            <summary>
            Inherits the template rules from the parent grammar
            </summary>
            <param name="parent">The parent's grammar</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.BuildDFA">
            <summary>
            Builds the complete DFA that matches the terminals in this grammar
            </summary>
            <returns>The DFA</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.Prepare">
            <summary>
            Prepares this grammar for code and data generation
            </summary>
            <returns>The error message, or <c>null</c> if all went well</returns>
            <remarks>
            This methods inserts a new grammar rule as its axiom and computes the FIRSTS and FOLLOWERS sets
            </remarks>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.AddRealAxiom">
            <summary>
            Adds the real axiom to this grammar
            </summary>
            <returns>An error message, if any</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.ComputeFirsts">
            <summary>
            Computes the FIRSTS sets for this grammar
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Grammar.ComputeFollowers">
            <summary>
            Computes the FOLLOWERS sets for this grammar
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Grammar.Name">
            <summary>
            Gets the grammar's name
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Grammar.Options">
            <summary>
            Gets the grammar's options
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Grammar.Terminals">
            <summary>
            Gets the grammar's terminals
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Grammar.Variables">
            <summary>
            Gets teh grammar's variables
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Grammar.Virtuals">
            <summary>
            Gets the grammar's virtual symbols
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Grammar.Actions">
            <summary>
            Gets the grammar's action symbols
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Grammar.Rules">
            <summary>
            Gets a list of all the rules in this grammar
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Grammar.TemplateRules">
            <summary>
            Gets the template rules in this grammar
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.SDK.DOTNodeShape">
            <summary>
            Represents the shape of nodes in a graph in the DOT format
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.box">
            <summary>
            Box shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.polygon">
            <summary>
            Polygon shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.ellipse">
            <summary>
            Ellipse shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.circle">
            <summary>
            Circle shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.point">
            <summary>
            Point shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.egg">
            <summary>
            Egg shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.triangle">
            <summary>
            Triangle shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.plaintext">
            <summary>
            No shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.diamond">
            <summary>
            Diamond shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.trapezium">
            <summary>
            Trapzium shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.parallelogram">
            <summary>
            Parallelogram shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.house">
            <summary>
            House shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.pentagon">
            <summary>
            Pentagon shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.hexagon">
            <summary>
            Hexagon shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.septagon">
            <summary>
            Septagon shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.octagon">
            <summary>
            Octogon shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.doublecircle">
            <summary>
            Double circle shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.doubleoctagon">
            <summary>
            Double octogon shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.tripleoctagon">
            <summary>
            Triple octogon shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.invtriangle">
            <summary>
            Inverse triangle shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.invtrapezium">
            <summary>
            Inverse trapezium shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.invhouse">
            <summary>
            Inverse house shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.Mdiamond">
            <summary>
            Diamon shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.Msquare">
            <summary>
            Sqaure shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.Mcircle">
            <summary>
            Circle shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.rect">
            <summary>
            Rectangle shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.rectangle">
            <summary>
            Rectangle shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.square">
            <summary>
            Square shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.none">
            <summary>
            Empty shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.note">
            <summary>
            Note shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.tab">
            <summary>
            Tab shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.folder">
            <summary>
            Folder shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.box3d">
            <summary>
            3D box shape
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTNodeShape.component">
            <summary>
            Component shape
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.SDK.DOTSerializer">
            <summary>
            Serializes graphs in the DOT format
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.DOTSerializer.writer">
            <summary>
            The writer
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.SDK.DOTSerializer.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the serializer
            </summary>
            <param name="name">Name of the graph</param>
            <param name="file">File to serialize to</param>
        </member>
        <member name="M:Hime.CentralDogma.SDK.DOTSerializer.WriteNode(System.String)">
            <summary>
            Writes a node with the given id
            </summary>
            <param name="id">Node's ID</param>
        </member>
        <member name="M:Hime.CentralDogma.SDK.DOTSerializer.WriteNode(System.String,System.String)">
            <summary>
            Writes a node with the given id
            </summary>
            <param name="id">Node's ID</param>
            <param name="label">Node's labe</param>
        </member>
        <member name="M:Hime.CentralDogma.SDK.DOTSerializer.WriteNodeURL(System.String,System.String)">
            <summary>
            Writes a node with the given id and URL
            </summary>
            <param name="id">Node's ID</param>
            <param name="url">Node's url</param>
        </member>
        <member name="M:Hime.CentralDogma.SDK.DOTSerializer.WriteNode(System.String,System.String,Hime.CentralDogma.SDK.DOTNodeShape)">
            <summary>
            Writes a node with the given id
            </summary>
            <param name="id">Node's ID</param>
            <param name="label">Node's labe</param>
            <param name="shape">Node's shape</param>
        </member>
        <member name="M:Hime.CentralDogma.SDK.DOTSerializer.WriteEdge(System.String,System.String,System.String)">
            <summary>
            Writes an edge
            </summary>
            <param name="tail">ID of the starting node</param>
            <param name="head">ID of the ending node</param>
            <param name="label">Label for the edge</param>
        </member>
        <member name="M:Hime.CentralDogma.SDK.DOTSerializer.WriteStructure(System.String,System.String,System.String[])">
            <summary>
            Writes a structure as a node
            </summary>
            <param name="id">Node's ID</param>
            <param name="label">Node's labe</param>
            <param name="items">Items of this structure</param>
        </member>
        <member name="M:Hime.CentralDogma.SDK.DOTSerializer.Close">
            <summary>
            Closes this serializer
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.SDK.DOTSerializer.SanitizeString(System.String)">
            <summary>
            Sanitizes the given string for the DOT format
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.SDK.MatchedTerminal">
            <summary>
            Represents a marker for a matched terminal in a lexer DFA
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.MatchedTerminal.terminal">
            <summary>
            The terminal represented by this marker
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.SDK.MatchedTerminal.#ctor(Hime.Redist.Symbol)">
            <summary>
            Initializes this marker
            </summary>
            <param name="t">The matched terminal</param>
        </member>
        <member name="M:Hime.CentralDogma.SDK.MatchedTerminal.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.SDK.MatchedTerminal"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.SDK.MatchedTerminal"/>.
            </returns>
        </member>
        <member name="P:Hime.CentralDogma.SDK.MatchedTerminal.Terminal">
            <summary>
            Gets the terminal repesented by this marker
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.SDK.MatchedTerminal.Priority">
            <summary>
            Gets the priority of this marker
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.SDK.LexerReflection">
            <summary>
            Utilities to decompile a lexer produced by Central Dogma
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.LexerReflection.terminals">
            <summary>
            List of the terminals that can be matched
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.LexerReflection.dfa">
            <summary>
            DFA of the lexer
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.SDK.LexerReflection.#ctor(System.Type)">
            <summary>
            Initializes this lexer reflection
            </summary>
            <param name="lexerType">The lexer's type</param>
        </member>
        <member name="P:Hime.CentralDogma.SDK.LexerReflection.Terminals">
            <summary>
            Gets the terminals that can be matched by this lexer
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.SDK.LexerReflection.DFA">
            <summary>
            Gets the lexer's dfa
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.UnicodeBlock">
            <summary>
            Represents a Unicode block of characters
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.UnicodeBlock.name">
            <summary>
            The block's name
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.UnicodeBlock.span">
            <summary>
            The block's character span
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeBlock.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes this Unicode block
            </summary>
            <param name="name">Block's name</param>
            <param name="begin">Beginning character (included)</param>
            <param name="end">End character (included)</param>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeBlock.ToString">
            <summary>
            Gets the string representation of this block
            </summary>
            <returns>The string representation</returns>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlock.Name">
            <summary>
            Get this block's name
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlock.Span">
            <summary>
            Gets the span of this block
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.UnicodeCategory">
            <summary>
            Represents a Unicode category
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.UnicodeCategory.name">
            <summary>
            The category's name
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.UnicodeCategory.spans">
            <summary>
            The list of character spans contained in this category
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeCategory.AddSpan(System.Int32,System.Int32)">
            <summary>
            Adds a span to this category
            </summary>
            <param name="begin">The span's beginning character</param>
            <param name="end">The span's ending character</param>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeCategory.Aggregate(Hime.CentralDogma.UnicodeCategory)">
            <summary>
            Aggregate the specified category into this one
            </summary>
            <param name="category">The category to aggregate</param>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeCategory.#ctor(System.String)">
            <summary>
            Initializes a new (empty) category
            </summary>
            <param name="name">The category's name</param>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeCategory.ToString">
            <summary>
            Gets the string representation of this category
            </summary>
            <returns>The string representation</returns>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategory.Name">
            <summary>
            Gets this unicode category's name
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategory.Spans">
            <summary>
            Gets the character spans contained by this category
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.CharSpan">
            <summary>
            Represents a range of characters
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.CharSpan.spanBegin">
            <summary>
            Beginning of the range (included)
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.CharSpan.spanEnd">
            <summary>
            End of the range (included)
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.CharSpan.Null">
            <summary>
            Constant value for an invalid value
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.CharSpan.#ctor(System.Char,System.Char)">
            <summary>
            Initializes this character span
            </summary>
            <param name="begin">The first (included) character</param>
            <param name="end">The last (included) character</param>
        </member>
        <member name="M:Hime.CentralDogma.CharSpan.Intersect(Hime.CentralDogma.CharSpan,Hime.CentralDogma.CharSpan)">
            <summary>
            Gets the intersection between two spans
            </summary>
            <param name="left">The left span</param>
            <param name="right">The right span</param>
            <returns>The intersection</returns>
        </member>
        <member name="M:Hime.CentralDogma.CharSpan.Split(Hime.CentralDogma.CharSpan,Hime.CentralDogma.CharSpan,Hime.CentralDogma.CharSpan@)">
            <summary>
            Splits the original span with the given splitter
            </summary>
            <param name="original">The span to be split</param>
            <param name="splitter">The splitter</param>
            <param name="rest">The second part of the resulting split</param>
            <returns>The first part of the resulting split</returns>
        </member>
        <member name="M:Hime.CentralDogma.CharSpan.Compare(Hime.CentralDogma.CharSpan,Hime.CentralDogma.CharSpan)">
            <summary>
            Compares the left and right spans for an increasing order sort
            </summary>
            <param name="left">The left span</param>
            <param name="right">The right span</param>
            <returns>The order between left and right</returns>
        </member>
        <member name="M:Hime.CentralDogma.CharSpan.CompareReverse(Hime.CentralDogma.CharSpan,Hime.CentralDogma.CharSpan)">
            <summary>
            Compares the left and right spans for a decreasing order sort
            </summary>
            <param name="left">The left span</param>
            <param name="right">The right span</param>
            <returns>The order between left and right</returns>
        </member>
        <member name="M:Hime.CentralDogma.CharSpan.ToString">
            <summary>
            Gets the string representation of this span
            </summary>
            <returns>The string representation</returns>
        </member>
        <member name="M:Hime.CentralDogma.CharSpan.CharToString(System.Char)">
            <summary>
            Gets a user-friendly representation of the character
            </summary>
            <param name="c">A character</param>
            <returns>The string representation</returns>
        </member>
        <member name="M:Hime.CentralDogma.CharSpan.CharToString_NonPrintable(System.Char)">
            <summary>
            Gets the string representation for the given non-printable character
            </summary>
            <param name="c">A non-printable character</param>
            <returns>The string representation</returns>
        </member>
        <member name="M:Hime.CentralDogma.CharSpan.Equals(System.Object)">
            <summary>
            Determines whether the given obj is equal to this span
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if obj is equal to this span</returns>
        </member>
        <member name="M:Hime.CentralDogma.CharSpan.GetHashCode">
            <summary>
            Gets the hash-code for this span
            </summary>
            <returns>The span's hash-code</returns>
        </member>
        <member name="P:Hime.CentralDogma.CharSpan.Begin">
            <summary>
            Gets the first (included) character of the range
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.CharSpan.End">
            <summary>
            Gets the last (included) character of the range
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.CharSpan.Length">
            <summary>
            Gets the range's length in number of characters
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.UnicodeHelper">
            <summary>
            Contains a set of helper methods for the support of Unicode
            </summary>
            <remarks>
            The current supported Unicode version is 6.3.0
            </remarks>
        </member>
        <member name="F:Hime.CentralDogma.UnicodeHelper.urlUnicodeBlocks">
            <summary>
            The URL of the latest specification of Unicode blocks
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.UnicodeHelper.urlUnicodeData">
            <summary>
            The URL of the latest specification of Unicode code points
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeHelper.GetLatestBlocks">
            <summary>
            Gets the latest unicode blocks from the Unicode web site
            </summary>
            <returns>
            The latest unicode blocks
            </returns>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeHelper.GetLatestCategories">
            <summary>
            Gets the latest unicode categories from the Unicode web site
            </summary>
            <returns>
            The latest unicode categories
            </returns>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeHelper.GenerateBlocksDB">
            <summary>
            Generates the code for the Unicode blocks data
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeHelper.GenerateBlocksTests">
            <summary>
            Generates the parsing tests for the unicode blocks
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeHelper.GenerateCategoriesDB">
            <summary>
            Generates the code for the Unicode categories data
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.UnicodeCodePoint">
            <summary>
            Represents a Unicode code point
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.UnicodeCodePoint.value">
            <summary>
            The code point value
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeCodePoint.#ctor(System.Int32)">
            <summary>
            Initializes the code point
            </summary>
            <param name="value">The code point value</param>
            <remarks>
            The valid Unicode character code points are in the follwing intervals:
            * U+0000 .. U+D7FF
            * U+E000 .. U+FFFF
            * U+10000 .. U+10FFFF
            </remarks>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeCodePoint.GetUTF16">
            <summary>
            Gets the UTF-16 encoding of this code point
            </summary>
            <returns>The UTF-16 encoding of this code point</returns>
            <remarks>No check is done in this method because the the value is assumed valid after construction</remarks>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeCodePoint.op_Equality(Hime.CentralDogma.UnicodeCodePoint,Hime.CentralDogma.UnicodeCodePoint)">
            <summary>
            Tests the equality of two Unicode code points
            </summary>
            <param name="cp1">A Unicode code point</param>
            <param name="cp2">A Unicode code point</param>
            <returns><c>true</c> if the two codepoints are equal</returns>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeCodePoint.op_Inequality(Hime.CentralDogma.UnicodeCodePoint,Hime.CentralDogma.UnicodeCodePoint)">
            <summary>
            Tests the difference of two Unicode code points
            </summary>
            <param name="cp1">A Unicode code point</param>
            <param name="cp2">A Unicode code point</param>
            <returns><c>true</c> if the two codepoints are different</returns>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeCodePoint.op_LessThan(Hime.CentralDogma.UnicodeCodePoint,Hime.CentralDogma.UnicodeCodePoint)">
            <summary>
            Tests the order of two Unicode code points
            </summary>
            <param name="cp1">A Unicode code point</param>
            <param name="cp2">A Unicode code point</param>
            <returns><c>true</c> if codepoint 1 is strictly before codepoint 2</returns>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeCodePoint.op_GreaterThan(Hime.CentralDogma.UnicodeCodePoint,Hime.CentralDogma.UnicodeCodePoint)">
            <summary>
            Tests the order of two Unicode code points
            </summary>
            <param name="cp1">A Unicode code point</param>
            <param name="cp2">A Unicode code point</param>
            <returns><c>true</c> if codepoint 1 is strictly after codepoint 2</returns>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeCodePoint.op_LessThanOrEqual(Hime.CentralDogma.UnicodeCodePoint,Hime.CentralDogma.UnicodeCodePoint)">
            <summary>
            Tests the order of two Unicode code points
            </summary>
            <param name="cp1">A Unicode code point</param>
            <param name="cp2">A Unicode code point</param>
            <returns><c>true</c> if codepoint 1 is before or equal to codepoint 2</returns>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeCodePoint.op_GreaterThanOrEqual(Hime.CentralDogma.UnicodeCodePoint,Hime.CentralDogma.UnicodeCodePoint)">
            <summary>
            Tests the order of two Unicode code points
            </summary>
            <param name="cp1">A Unicode code point</param>
            <param name="cp2">A Unicode code point</param>
            <returns><c>true</c> if codepoint 1 is after or equal to codepoint 2</returns>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeCodePoint.CompareTo(Hime.CentralDogma.UnicodeCodePoint)">
            <summary>
            Returns the sort order of the current instance compared to the specified object.
            </summary>
            <param name="other">The object to compare to</param>
            <returns>
            The sort order of the current instance compared to the specified object.
            </returns>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeCodePoint.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Hime.CentralDogma.UnicodeCodePoint"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:Hime.CentralDogma.UnicodeCodePoint"/>.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:Hime.CentralDogma.UnicodeCodePoint"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeCodePoint.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Hime.CentralDogma.UnicodeCodePoint"/> object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeCodePoint.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.UnicodeCodePoint"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.UnicodeCodePoint"/>.
            </returns>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCodePoint.Value">
            <summary>
            Gets the code point value
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCodePoint.IsPlane0">
            <summary>
            Gets a value indicating whether this codepoint is in Unicode plane 0
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.UnicodeSpan">
            <summary>
            Represents a range of Unicode characters
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.UnicodeSpan.spanBegin">
            <summary>
            Beginning of the range (included)
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.UnicodeSpan.spanEnd">
            <summary>
            End of the range (included)
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeSpan.#ctor(Hime.CentralDogma.UnicodeCodePoint,Hime.CentralDogma.UnicodeCodePoint)">
            <summary>
            Initializes this character span
            </summary>
            <param name="begin">The first (included) character</param>
            <param name="end">The last (included) character</param>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeSpan.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes this character span
            </summary>
            <param name="begin">The first (included) character</param>
            <param name="end">The last (included) character</param>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeSpan.ToString">
            <summary>
            Gets the string representation of this span
            </summary>
            <returns>The string representation</returns>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeSpan.Begin">
            <summary>
            Gets the first (included) character of the range
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeSpan.End">
            <summary>
            Gets the last (included) character of the range
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeSpan.Length">
            <summary>
            Gets the range's length in number of characters
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeSpan.IsPlane0">
            <summary>
            Gets a value indicating whether this span is entirely in Unicode plane 0
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.UnicodeBlocks">
            <summary>
            Contains the supported Unicode blocks
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.UnicodeBlocks.db">
            <summary>
            The database of Unicode blocks accesible by names
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeBlocks.BuildDB">
            <summary>
            Builds the blocks database
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeBlocks.GetBlock(System.String)">
            <summary>
            Gets the block with the given name
            </summary>
            <param name="name">A Unicode block name</param>
            <returns>The corresponding block, or null if it does not exists</returns>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.BasicLatin">
            <summary>
            Gets the Unicode block BasicLatin
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Latin1Supplement">
            <summary>
            Gets the Unicode block Latin-1Supplement
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.LatinExtendedA">
            <summary>
            Gets the Unicode block LatinExtended-A
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.LatinExtendedB">
            <summary>
            Gets the Unicode block LatinExtended-B
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.IPAExtensions">
            <summary>
            Gets the Unicode block IPAExtensions
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.SpacingModifierLetters">
            <summary>
            Gets the Unicode block SpacingModifierLetters
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.CombiningDiacriticalMarks">
            <summary>
            Gets the Unicode block CombiningDiacriticalMarks
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.GreekandCoptic">
            <summary>
            Gets the Unicode block GreekandCoptic
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Cyrillic">
            <summary>
            Gets the Unicode block Cyrillic
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.CyrillicSupplement">
            <summary>
            Gets the Unicode block CyrillicSupplement
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Armenian">
            <summary>
            Gets the Unicode block Armenian
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Hebrew">
            <summary>
            Gets the Unicode block Hebrew
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Arabic">
            <summary>
            Gets the Unicode block Arabic
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Syriac">
            <summary>
            Gets the Unicode block Syriac
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.ArabicSupplement">
            <summary>
            Gets the Unicode block ArabicSupplement
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Thaana">
            <summary>
            Gets the Unicode block Thaana
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.NKo">
            <summary>
            Gets the Unicode block NKo
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Samaritan">
            <summary>
            Gets the Unicode block Samaritan
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Mandaic">
            <summary>
            Gets the Unicode block Mandaic
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.ArabicExtendedA">
            <summary>
            Gets the Unicode block ArabicExtended-A
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Devanagari">
            <summary>
            Gets the Unicode block Devanagari
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Bengali">
            <summary>
            Gets the Unicode block Bengali
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Gurmukhi">
            <summary>
            Gets the Unicode block Gurmukhi
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Gujarati">
            <summary>
            Gets the Unicode block Gujarati
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Oriya">
            <summary>
            Gets the Unicode block Oriya
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Tamil">
            <summary>
            Gets the Unicode block Tamil
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Telugu">
            <summary>
            Gets the Unicode block Telugu
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Kannada">
            <summary>
            Gets the Unicode block Kannada
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Malayalam">
            <summary>
            Gets the Unicode block Malayalam
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Sinhala">
            <summary>
            Gets the Unicode block Sinhala
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Thai">
            <summary>
            Gets the Unicode block Thai
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Lao">
            <summary>
            Gets the Unicode block Lao
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Tibetan">
            <summary>
            Gets the Unicode block Tibetan
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Myanmar">
            <summary>
            Gets the Unicode block Myanmar
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Georgian">
            <summary>
            Gets the Unicode block Georgian
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.HangulJamo">
            <summary>
            Gets the Unicode block HangulJamo
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Ethiopic">
            <summary>
            Gets the Unicode block Ethiopic
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.EthiopicSupplement">
            <summary>
            Gets the Unicode block EthiopicSupplement
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Cherokee">
            <summary>
            Gets the Unicode block Cherokee
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.UnifiedCanadianAboriginalSyllabics">
            <summary>
            Gets the Unicode block UnifiedCanadianAboriginalSyllabics
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Ogham">
            <summary>
            Gets the Unicode block Ogham
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Runic">
            <summary>
            Gets the Unicode block Runic
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Tagalog">
            <summary>
            Gets the Unicode block Tagalog
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Hanunoo">
            <summary>
            Gets the Unicode block Hanunoo
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Buhid">
            <summary>
            Gets the Unicode block Buhid
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Tagbanwa">
            <summary>
            Gets the Unicode block Tagbanwa
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Khmer">
            <summary>
            Gets the Unicode block Khmer
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Mongolian">
            <summary>
            Gets the Unicode block Mongolian
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.UnifiedCanadianAboriginalSyllabicsExtended">
            <summary>
            Gets the Unicode block UnifiedCanadianAboriginalSyllabicsExtended
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Limbu">
            <summary>
            Gets the Unicode block Limbu
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.TaiLe">
            <summary>
            Gets the Unicode block TaiLe
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.NewTaiLue">
            <summary>
            Gets the Unicode block NewTaiLue
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.KhmerSymbols">
            <summary>
            Gets the Unicode block KhmerSymbols
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Buginese">
            <summary>
            Gets the Unicode block Buginese
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.TaiTham">
            <summary>
            Gets the Unicode block TaiTham
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.CombiningDiacriticalMarksExtended">
            <summary>
            Gets the Unicode block CombiningDiacriticalMarksExtended
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Balinese">
            <summary>
            Gets the Unicode block Balinese
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Sundanese">
            <summary>
            Gets the Unicode block Sundanese
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Batak">
            <summary>
            Gets the Unicode block Batak
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Lepcha">
            <summary>
            Gets the Unicode block Lepcha
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.OlChiki">
            <summary>
            Gets the Unicode block OlChiki
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.SundaneseSupplement">
            <summary>
            Gets the Unicode block SundaneseSupplement
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.VedicExtensions">
            <summary>
            Gets the Unicode block VedicExtensions
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.PhoneticExtensions">
            <summary>
            Gets the Unicode block PhoneticExtensions
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.PhoneticExtensionsSupplement">
            <summary>
            Gets the Unicode block PhoneticExtensionsSupplement
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.CombiningDiacriticalMarksSupplement">
            <summary>
            Gets the Unicode block CombiningDiacriticalMarksSupplement
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.LatinExtendedAdditional">
            <summary>
            Gets the Unicode block LatinExtendedAdditional
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.GreekExtended">
            <summary>
            Gets the Unicode block GreekExtended
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.GeneralPunctuation">
            <summary>
            Gets the Unicode block GeneralPunctuation
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.SuperscriptsandSubscripts">
            <summary>
            Gets the Unicode block SuperscriptsandSubscripts
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.CurrencySymbols">
            <summary>
            Gets the Unicode block CurrencySymbols
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.CombiningDiacriticalMarksforSymbols">
            <summary>
            Gets the Unicode block CombiningDiacriticalMarksforSymbols
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.LetterlikeSymbols">
            <summary>
            Gets the Unicode block LetterlikeSymbols
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.NumberForms">
            <summary>
            Gets the Unicode block NumberForms
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Arrows">
            <summary>
            Gets the Unicode block Arrows
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.MathematicalOperators">
            <summary>
            Gets the Unicode block MathematicalOperators
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.MiscellaneousTechnical">
            <summary>
            Gets the Unicode block MiscellaneousTechnical
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.ControlPictures">
            <summary>
            Gets the Unicode block ControlPictures
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.OpticalCharacterRecognition">
            <summary>
            Gets the Unicode block OpticalCharacterRecognition
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.EnclosedAlphanumerics">
            <summary>
            Gets the Unicode block EnclosedAlphanumerics
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.BoxDrawing">
            <summary>
            Gets the Unicode block BoxDrawing
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.BlockElements">
            <summary>
            Gets the Unicode block BlockElements
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.GeometricShapes">
            <summary>
            Gets the Unicode block GeometricShapes
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.MiscellaneousSymbols">
            <summary>
            Gets the Unicode block MiscellaneousSymbols
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Dingbats">
            <summary>
            Gets the Unicode block Dingbats
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.MiscellaneousMathematicalSymbolsA">
            <summary>
            Gets the Unicode block MiscellaneousMathematicalSymbols-A
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.SupplementalArrowsA">
            <summary>
            Gets the Unicode block SupplementalArrows-A
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.BraillePatterns">
            <summary>
            Gets the Unicode block BraillePatterns
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.SupplementalArrowsB">
            <summary>
            Gets the Unicode block SupplementalArrows-B
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.MiscellaneousMathematicalSymbolsB">
            <summary>
            Gets the Unicode block MiscellaneousMathematicalSymbols-B
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.SupplementalMathematicalOperators">
            <summary>
            Gets the Unicode block SupplementalMathematicalOperators
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.MiscellaneousSymbolsandArrows">
            <summary>
            Gets the Unicode block MiscellaneousSymbolsandArrows
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Glagolitic">
            <summary>
            Gets the Unicode block Glagolitic
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.LatinExtendedC">
            <summary>
            Gets the Unicode block LatinExtended-C
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Coptic">
            <summary>
            Gets the Unicode block Coptic
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.GeorgianSupplement">
            <summary>
            Gets the Unicode block GeorgianSupplement
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Tifinagh">
            <summary>
            Gets the Unicode block Tifinagh
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.EthiopicExtended">
            <summary>
            Gets the Unicode block EthiopicExtended
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.CyrillicExtendedA">
            <summary>
            Gets the Unicode block CyrillicExtended-A
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.SupplementalPunctuation">
            <summary>
            Gets the Unicode block SupplementalPunctuation
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.CJKRadicalsSupplement">
            <summary>
            Gets the Unicode block CJKRadicalsSupplement
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.KangxiRadicals">
            <summary>
            Gets the Unicode block KangxiRadicals
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.IdeographicDescriptionCharacters">
            <summary>
            Gets the Unicode block IdeographicDescriptionCharacters
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.CJKSymbolsandPunctuation">
            <summary>
            Gets the Unicode block CJKSymbolsandPunctuation
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Hiragana">
            <summary>
            Gets the Unicode block Hiragana
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Katakana">
            <summary>
            Gets the Unicode block Katakana
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Bopomofo">
            <summary>
            Gets the Unicode block Bopomofo
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.HangulCompatibilityJamo">
            <summary>
            Gets the Unicode block HangulCompatibilityJamo
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Kanbun">
            <summary>
            Gets the Unicode block Kanbun
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.BopomofoExtended">
            <summary>
            Gets the Unicode block BopomofoExtended
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.CJKStrokes">
            <summary>
            Gets the Unicode block CJKStrokes
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.KatakanaPhoneticExtensions">
            <summary>
            Gets the Unicode block KatakanaPhoneticExtensions
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.EnclosedCJKLettersandMonths">
            <summary>
            Gets the Unicode block EnclosedCJKLettersandMonths
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.CJKCompatibility">
            <summary>
            Gets the Unicode block CJKCompatibility
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.CJKUnifiedIdeographsExtensionA">
            <summary>
            Gets the Unicode block CJKUnifiedIdeographsExtensionA
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.YijingHexagramSymbols">
            <summary>
            Gets the Unicode block YijingHexagramSymbols
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.CJKUnifiedIdeographs">
            <summary>
            Gets the Unicode block CJKUnifiedIdeographs
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.YiSyllables">
            <summary>
            Gets the Unicode block YiSyllables
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.YiRadicals">
            <summary>
            Gets the Unicode block YiRadicals
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Lisu">
            <summary>
            Gets the Unicode block Lisu
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Vai">
            <summary>
            Gets the Unicode block Vai
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.CyrillicExtendedB">
            <summary>
            Gets the Unicode block CyrillicExtended-B
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Bamum">
            <summary>
            Gets the Unicode block Bamum
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.ModifierToneLetters">
            <summary>
            Gets the Unicode block ModifierToneLetters
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.LatinExtendedD">
            <summary>
            Gets the Unicode block LatinExtended-D
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.SylotiNagri">
            <summary>
            Gets the Unicode block SylotiNagri
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.CommonIndicNumberForms">
            <summary>
            Gets the Unicode block CommonIndicNumberForms
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Phagspa">
            <summary>
            Gets the Unicode block Phags-pa
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Saurashtra">
            <summary>
            Gets the Unicode block Saurashtra
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.DevanagariExtended">
            <summary>
            Gets the Unicode block DevanagariExtended
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.KayahLi">
            <summary>
            Gets the Unicode block KayahLi
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Rejang">
            <summary>
            Gets the Unicode block Rejang
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.HangulJamoExtendedA">
            <summary>
            Gets the Unicode block HangulJamoExtended-A
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Javanese">
            <summary>
            Gets the Unicode block Javanese
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.MyanmarExtendedB">
            <summary>
            Gets the Unicode block MyanmarExtended-B
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Cham">
            <summary>
            Gets the Unicode block Cham
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.MyanmarExtendedA">
            <summary>
            Gets the Unicode block MyanmarExtended-A
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.TaiViet">
            <summary>
            Gets the Unicode block TaiViet
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.MeeteiMayekExtensions">
            <summary>
            Gets the Unicode block MeeteiMayekExtensions
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.EthiopicExtendedA">
            <summary>
            Gets the Unicode block EthiopicExtended-A
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.LatinExtendedE">
            <summary>
            Gets the Unicode block LatinExtended-E
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.MeeteiMayek">
            <summary>
            Gets the Unicode block MeeteiMayek
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.HangulSyllables">
            <summary>
            Gets the Unicode block HangulSyllables
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.HangulJamoExtendedB">
            <summary>
            Gets the Unicode block HangulJamoExtended-B
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.PrivateUseArea">
            <summary>
            Gets the Unicode block PrivateUseArea
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.CJKCompatibilityIdeographs">
            <summary>
            Gets the Unicode block CJKCompatibilityIdeographs
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.AlphabeticPresentationForms">
            <summary>
            Gets the Unicode block AlphabeticPresentationForms
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.ArabicPresentationFormsA">
            <summary>
            Gets the Unicode block ArabicPresentationForms-A
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.VariationSelectors">
            <summary>
            Gets the Unicode block VariationSelectors
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.VerticalForms">
            <summary>
            Gets the Unicode block VerticalForms
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.CombiningHalfMarks">
            <summary>
            Gets the Unicode block CombiningHalfMarks
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.CJKCompatibilityForms">
            <summary>
            Gets the Unicode block CJKCompatibilityForms
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.SmallFormVariants">
            <summary>
            Gets the Unicode block SmallFormVariants
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.ArabicPresentationFormsB">
            <summary>
            Gets the Unicode block ArabicPresentationForms-B
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.HalfwidthandFullwidthForms">
            <summary>
            Gets the Unicode block HalfwidthandFullwidthForms
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Specials">
            <summary>
            Gets the Unicode block Specials
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.LinearBSyllabary">
            <summary>
            Gets the Unicode block LinearBSyllabary
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.LinearBIdeograms">
            <summary>
            Gets the Unicode block LinearBIdeograms
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.AegeanNumbers">
            <summary>
            Gets the Unicode block AegeanNumbers
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.AncientGreekNumbers">
            <summary>
            Gets the Unicode block AncientGreekNumbers
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.AncientSymbols">
            <summary>
            Gets the Unicode block AncientSymbols
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.PhaistosDisc">
            <summary>
            Gets the Unicode block PhaistosDisc
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Lycian">
            <summary>
            Gets the Unicode block Lycian
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Carian">
            <summary>
            Gets the Unicode block Carian
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.CopticEpactNumbers">
            <summary>
            Gets the Unicode block CopticEpactNumbers
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.OldItalic">
            <summary>
            Gets the Unicode block OldItalic
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Gothic">
            <summary>
            Gets the Unicode block Gothic
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.OldPermic">
            <summary>
            Gets the Unicode block OldPermic
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Ugaritic">
            <summary>
            Gets the Unicode block Ugaritic
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.OldPersian">
            <summary>
            Gets the Unicode block OldPersian
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Deseret">
            <summary>
            Gets the Unicode block Deseret
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Shavian">
            <summary>
            Gets the Unicode block Shavian
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Osmanya">
            <summary>
            Gets the Unicode block Osmanya
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Elbasan">
            <summary>
            Gets the Unicode block Elbasan
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.CaucasianAlbanian">
            <summary>
            Gets the Unicode block CaucasianAlbanian
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.LinearA">
            <summary>
            Gets the Unicode block LinearA
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.CypriotSyllabary">
            <summary>
            Gets the Unicode block CypriotSyllabary
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.ImperialAramaic">
            <summary>
            Gets the Unicode block ImperialAramaic
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Palmyrene">
            <summary>
            Gets the Unicode block Palmyrene
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Nabataean">
            <summary>
            Gets the Unicode block Nabataean
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Phoenician">
            <summary>
            Gets the Unicode block Phoenician
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Lydian">
            <summary>
            Gets the Unicode block Lydian
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.MeroiticHieroglyphs">
            <summary>
            Gets the Unicode block MeroiticHieroglyphs
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.MeroiticCursive">
            <summary>
            Gets the Unicode block MeroiticCursive
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Kharoshthi">
            <summary>
            Gets the Unicode block Kharoshthi
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.OldSouthArabian">
            <summary>
            Gets the Unicode block OldSouthArabian
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.OldNorthArabian">
            <summary>
            Gets the Unicode block OldNorthArabian
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Manichaean">
            <summary>
            Gets the Unicode block Manichaean
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Avestan">
            <summary>
            Gets the Unicode block Avestan
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.InscriptionalParthian">
            <summary>
            Gets the Unicode block InscriptionalParthian
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.InscriptionalPahlavi">
            <summary>
            Gets the Unicode block InscriptionalPahlavi
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.PsalterPahlavi">
            <summary>
            Gets the Unicode block PsalterPahlavi
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.OldTurkic">
            <summary>
            Gets the Unicode block OldTurkic
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.RumiNumeralSymbols">
            <summary>
            Gets the Unicode block RumiNumeralSymbols
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Brahmi">
            <summary>
            Gets the Unicode block Brahmi
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Kaithi">
            <summary>
            Gets the Unicode block Kaithi
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.SoraSompeng">
            <summary>
            Gets the Unicode block SoraSompeng
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Chakma">
            <summary>
            Gets the Unicode block Chakma
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Mahajani">
            <summary>
            Gets the Unicode block Mahajani
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Sharada">
            <summary>
            Gets the Unicode block Sharada
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.SinhalaArchaicNumbers">
            <summary>
            Gets the Unicode block SinhalaArchaicNumbers
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Khojki">
            <summary>
            Gets the Unicode block Khojki
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Khudawadi">
            <summary>
            Gets the Unicode block Khudawadi
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Grantha">
            <summary>
            Gets the Unicode block Grantha
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Tirhuta">
            <summary>
            Gets the Unicode block Tirhuta
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Siddham">
            <summary>
            Gets the Unicode block Siddham
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Modi">
            <summary>
            Gets the Unicode block Modi
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Takri">
            <summary>
            Gets the Unicode block Takri
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.WarangCiti">
            <summary>
            Gets the Unicode block WarangCiti
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.PauCinHau">
            <summary>
            Gets the Unicode block PauCinHau
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Cuneiform">
            <summary>
            Gets the Unicode block Cuneiform
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.CuneiformNumbersandPunctuation">
            <summary>
            Gets the Unicode block CuneiformNumbersandPunctuation
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.EgyptianHieroglyphs">
            <summary>
            Gets the Unicode block EgyptianHieroglyphs
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.BamumSupplement">
            <summary>
            Gets the Unicode block BamumSupplement
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Mro">
            <summary>
            Gets the Unicode block Mro
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.BassaVah">
            <summary>
            Gets the Unicode block BassaVah
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.PahawhHmong">
            <summary>
            Gets the Unicode block PahawhHmong
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Miao">
            <summary>
            Gets the Unicode block Miao
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.KanaSupplement">
            <summary>
            Gets the Unicode block KanaSupplement
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Duployan">
            <summary>
            Gets the Unicode block Duployan
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.ShorthandFormatControls">
            <summary>
            Gets the Unicode block ShorthandFormatControls
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.ByzantineMusicalSymbols">
            <summary>
            Gets the Unicode block ByzantineMusicalSymbols
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.MusicalSymbols">
            <summary>
            Gets the Unicode block MusicalSymbols
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.AncientGreekMusicalNotation">
            <summary>
            Gets the Unicode block AncientGreekMusicalNotation
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.TaiXuanJingSymbols">
            <summary>
            Gets the Unicode block TaiXuanJingSymbols
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.CountingRodNumerals">
            <summary>
            Gets the Unicode block CountingRodNumerals
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.MathematicalAlphanumericSymbols">
            <summary>
            Gets the Unicode block MathematicalAlphanumericSymbols
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.MendeKikakui">
            <summary>
            Gets the Unicode block MendeKikakui
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.ArabicMathematicalAlphabeticSymbols">
            <summary>
            Gets the Unicode block ArabicMathematicalAlphabeticSymbols
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.MahjongTiles">
            <summary>
            Gets the Unicode block MahjongTiles
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.DominoTiles">
            <summary>
            Gets the Unicode block DominoTiles
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.PlayingCards">
            <summary>
            Gets the Unicode block PlayingCards
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.EnclosedAlphanumericSupplement">
            <summary>
            Gets the Unicode block EnclosedAlphanumericSupplement
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.EnclosedIdeographicSupplement">
            <summary>
            Gets the Unicode block EnclosedIdeographicSupplement
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.MiscellaneousSymbolsandPictographs">
            <summary>
            Gets the Unicode block MiscellaneousSymbolsandPictographs
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Emoticons">
            <summary>
            Gets the Unicode block Emoticons
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.OrnamentalDingbats">
            <summary>
            Gets the Unicode block OrnamentalDingbats
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.TransportandMapSymbols">
            <summary>
            Gets the Unicode block TransportandMapSymbols
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.AlchemicalSymbols">
            <summary>
            Gets the Unicode block AlchemicalSymbols
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.GeometricShapesExtended">
            <summary>
            Gets the Unicode block GeometricShapesExtended
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.SupplementalArrowsC">
            <summary>
            Gets the Unicode block SupplementalArrows-C
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.CJKUnifiedIdeographsExtensionB">
            <summary>
            Gets the Unicode block CJKUnifiedIdeographsExtensionB
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.CJKUnifiedIdeographsExtensionC">
            <summary>
            Gets the Unicode block CJKUnifiedIdeographsExtensionC
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.CJKUnifiedIdeographsExtensionD">
            <summary>
            Gets the Unicode block CJKUnifiedIdeographsExtensionD
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.CJKCompatibilityIdeographsSupplement">
            <summary>
            Gets the Unicode block CJKCompatibilityIdeographsSupplement
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.Tags">
            <summary>
            Gets the Unicode block Tags
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.VariationSelectorsSupplement">
            <summary>
            Gets the Unicode block VariationSelectorsSupplement
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.SupplementaryPrivateUseAreaA">
            <summary>
            Gets the Unicode block SupplementaryPrivateUseArea-A
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeBlocks.SupplementaryPrivateUseAreaB">
            <summary>
            Gets the Unicode block SupplementaryPrivateUseArea-B
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.UnicodeCategories">
            <summary>
            Contains the supported Unicode categories
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.UnicodeCategories.db">
            <summary>
            The database of Unicode categories accesible by names
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeCategories.BuildDB">
            <summary>
            Builds the category database
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.UnicodeCategories.GetCategory(System.String)">
            <summary>
            Gets the category with the given name
            </summary>
            <param name="name">A Unicode category name</param>
            <returns>The corresponding category, or null if it does not exists</returns>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Cc">
            <summary>
            Gets the Unicode category Cc
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Zs">
            <summary>
            Gets the Unicode category Zs
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Po">
            <summary>
            Gets the Unicode category Po
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Sc">
            <summary>
            Gets the Unicode category Sc
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Ps">
            <summary>
            Gets the Unicode category Ps
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Pe">
            <summary>
            Gets the Unicode category Pe
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Sm">
            <summary>
            Gets the Unicode category Sm
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Pd">
            <summary>
            Gets the Unicode category Pd
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Nd">
            <summary>
            Gets the Unicode category Nd
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Lu">
            <summary>
            Gets the Unicode category Lu
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Sk">
            <summary>
            Gets the Unicode category Sk
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Pc">
            <summary>
            Gets the Unicode category Pc
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Ll">
            <summary>
            Gets the Unicode category Ll
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.So">
            <summary>
            Gets the Unicode category So
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Lo">
            <summary>
            Gets the Unicode category Lo
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Pi">
            <summary>
            Gets the Unicode category Pi
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Cf">
            <summary>
            Gets the Unicode category Cf
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.No">
            <summary>
            Gets the Unicode category No
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Pf">
            <summary>
            Gets the Unicode category Pf
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Lt">
            <summary>
            Gets the Unicode category Lt
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Lm">
            <summary>
            Gets the Unicode category Lm
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Mn">
            <summary>
            Gets the Unicode category Mn
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Me">
            <summary>
            Gets the Unicode category Me
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Mc">
            <summary>
            Gets the Unicode category Mc
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Nl">
            <summary>
            Gets the Unicode category Nl
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Zl">
            <summary>
            Gets the Unicode category Zl
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Zp">
            <summary>
            Gets the Unicode category Zp
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Cs">
            <summary>
            Gets the Unicode category Cs
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Co">
            <summary>
            Gets the Unicode category Co
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.C">
            <summary>
            Gets the Unicode category C
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.Z">
            <summary>
            Gets the Unicode category Z
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.P">
            <summary>
            Gets the Unicode category P
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.S">
            <summary>
            Gets the Unicode category S
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.N">
            <summary>
            Gets the Unicode category N
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.L">
            <summary>
            Gets the Unicode category L
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.UnicodeCategories.M">
            <summary>
            Gets the Unicode category M
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.SDK.AssemblyReflection">
            <summary>
            Helper class for handling generated assembly containing lexers and parsers
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.AssemblyReflection.assembly">
            <summary>
            The inspected assembly
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.AssemblyReflection.lexerTypes">
            <summary>
            The lexers in the current assembly
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.AssemblyReflection.parserTypes">
            <summary>
            The parsers in the current assembly
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.SDK.AssemblyReflection.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes this inspector for the given assembly
            </summary>
            <param name="assembly">The assembly to inspect</param>
        </member>
        <member name="M:Hime.CentralDogma.SDK.AssemblyReflection.#ctor(System.String)">
            <summary>
            Initializes this inspector for the assembly in the given file
            </summary>
            <param name="file">The file containing the assembly to inspect</param>
        </member>
        <member name="M:Hime.CentralDogma.SDK.AssemblyReflection.GetType(System.String)">
            <summary>
            Gets the type in this assembly with the specified fully-qualified name
            </summary>
            <param name="name">The fully qualified name of a type</param>
            <returns>The type with the specified name</returns>
        </member>
        <member name="M:Hime.CentralDogma.SDK.AssemblyReflection.getLexer``1(``0)">
            <summary>
            Gets an instance of the default lexer
            </summary>
            <param name="input">The input for the lexer</param>
            <returns>The lexe</returns>
        </member>
        <member name="M:Hime.CentralDogma.SDK.AssemblyReflection.getLexer``1(System.Type,``0)">
            <summary>
            Gets an instance of the specified lexer
            </summary>
            <param name="lexerType">The lexer's type</param>
            <param name="input">The input for the lexer</param>
            <returns>The lexe</returns>
        </member>
        <member name="M:Hime.CentralDogma.SDK.AssemblyReflection.GetParser``1(``0)">
            <summary>
            Gets an instance of the default parser
            </summary>
            <param name="input">The input for the associated lexer</param>
            <returns>The parser</returns>
        </member>
        <member name="M:Hime.CentralDogma.SDK.AssemblyReflection.GetParser``1(``0,System.Collections.Generic.Dictionary{System.String,Hime.Redist.SemanticAction})">
            <summary>
            Gets an instance of the default parser
            </summary>
            <param name="input">The input for the associated lexer</param>
            <param name="actions">The semantic actions for the parser</param>
            <returns>The parser</returns>
        </member>
        <member name="M:Hime.CentralDogma.SDK.AssemblyReflection.GetParser``1(System.String,``0)">
            <summary>
            Gets an instance of the specified parser
            </summary>
            <param name="name">The parser's fully qualified name</param>
            <param name="input">The input for the associated lexer</param>
            <returns>The parser</returns>
        </member>
        <member name="M:Hime.CentralDogma.SDK.AssemblyReflection.GetParser``1(System.String,``0,System.Collections.Generic.Dictionary{System.String,Hime.Redist.SemanticAction})">
            <summary>
            Gets an instance of the specified parser
            </summary>
            <param name="name">The parser's fully qualified name</param>
            <param name="input">The input for the associated lexer</param>
            <param name="actions">The semantic actions for the parser</param>
            <returns>The parser</returns>
        </member>
        <member name="M:Hime.CentralDogma.SDK.AssemblyReflection.GetParser``1(System.Type,``0)">
            <summary>
            Gets an instance of the specified parser
            </summary>
            <param name="parserType">The parser's type</param>
            <param name="input">The input for the associated lexer</param>
            <returns>The parser</returns>
        </member>
        <member name="M:Hime.CentralDogma.SDK.AssemblyReflection.GetParser``1(System.Type,``0,System.Collections.Generic.Dictionary{System.String,Hime.Redist.SemanticAction})">
            <summary>
            Gets an instance of the specified parser
            </summary>
            <param name="parserType">The parser's type</param>
            <param name="input">The input for the associated lexer</param>
            <param name="actions">The semantic actions for the parser</param>
            <returns>The parser</returns>
        </member>
        <member name="P:Hime.CentralDogma.SDK.AssemblyReflection.Lexers">
            <summary>
            Gets the lexers in this assembly
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.SDK.AssemblyReflection.Parsers">
            <summary>
            Gets the parsers in this assembly
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Automata.LRState">
            <summary>
            Represents a state in an LR automaton
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.LRState.id">
            <summary>
            The state's identifier
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.LRState.transitions">
            <summary>
            The transitions from this state
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.LRState.reductions">
            <summary>
            The reductions in this state
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.LRState.accept">
            <summary>
            Whether this state is an accepting state
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.LRState.#ctor(System.Int32)">
            <summary>
            Initializes this LR state
            </summary>
            <param name="id">The state's identifier</param>
        </member>
        <member name="M:Hime.CentralDogma.Automata.LRState.AddTransition(Hime.CentralDogma.Automata.LRTransition)">
            <summary>
            Adds the specified transition to this state
            </summary>
            <param name="transition">A transition</param>
        </member>
        <member name="M:Hime.CentralDogma.Automata.LRState.AddReduction(Hime.CentralDogma.Automata.LRReduction)">
            <summary>
            Adds the specified reduction to this state
            </summary>
            <param name="reduction">A reduction</param>
        </member>
        <member name="M:Hime.CentralDogma.Automata.LRState.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Automata.LRState"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Automata.LRState"/>.
            </returns>
        </member>
        <member name="P:Hime.CentralDogma.Automata.LRState.ID">
            <summary>
            Gets this state's identifier
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Automata.LRState.Transitions">
            <summary>
            Gets the transitions from this state
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Automata.LRState.Reductions">
            <summary>
            Gets the reductions in this state
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Automata.LRState.IsAccept">
            <summary>
            Gets or sets whether this state is an accepting state
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Automata.LRTransition">
            <summary>
            Represents a transition in a LR automaton
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.LRTransition.label">
            <summary>
            The label on this transition
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.LRTransition.target">
            <summary>
            The transition's target
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.LRTransition.#ctor(Hime.Redist.Symbol,Hime.CentralDogma.Automata.LRState)">
            <summary>
            Initializes this transition
            </summary>
            <param name="label">The label on this transition</param>
            <param name="target">The target of this transition</param>
        </member>
        <member name="M:Hime.CentralDogma.Automata.LRTransition.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Automata.LRTransition"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Automata.LRTransition"/>.
            </returns>
        </member>
        <member name="P:Hime.CentralDogma.Automata.LRTransition.Label">
            <summary>
            Gets the label on this transition
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Automata.LRTransition.Target">
            <summary>
            Gets the target of this transition
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Automata.LRReduction">
            <summary>
            Represents a reduction in a LR automaton
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.LRReduction.lookahead">
            <summary>
            The lookahead to reduce on
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.LRReduction.head">
            <summary>
            The reduced variable
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.LRReduction.length">
            <summary>
            The reduction's length
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.LRReduction.#ctor(Hime.Redist.Symbol,Hime.Redist.Symbol,System.Int32)">
            <summary>
            Initializes this reduction
            </summary>
            <param name="lookahead">The lookahead to reduce on</param>
            <param name="head">The reduced variable</param>
            <param name="length">The reduction's length</param>
        </member>
        <member name="M:Hime.CentralDogma.Automata.LRReduction.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Automata.LRReduction"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Automata.LRReduction"/>.
            </returns>
        </member>
        <member name="P:Hime.CentralDogma.Automata.LRReduction.Lookahead">
            <summary>
            Gets the lookahead terminal to reduce on
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Automata.LRReduction.Head">
            <summary>
            Gets the head (variable) of the reduced rule
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Automata.LRReduction.Length">
            <summary>
            Gets the reduction's length
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Automata.LRAutomaton">
            <summary>
            Represents an LR automaton
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Automata.LRAutomaton.states">
            <summary>
            The states
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.LRAutomaton.#ctor">
            <summary>
            Initializes an empty automaton
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Automata.LRAutomaton.AddState(Hime.CentralDogma.Automata.LRState)">
            <summary>
            Adds the specified state to this automaton
            </summary>
            <param name="state">A state</param>
        </member>
        <member name="P:Hime.CentralDogma.Automata.LRAutomaton.States">
            <summary>
            Gets the states in this automaton
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.SDK.ParserReflection">
            <summary>
            Utilities to decompile a parser produced by Central Dogma
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.ParserReflection.terminals">
            <summary>
            List of the terminals matched by the associated lexer
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.ParserReflection.variables">
            <summary>
            List of the variables in this parser
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.ParserReflection.virtuals">
            <summary>
            List of the virtuals in this parser
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.ParserReflection.automaton">
            <summary>
            The LR automaton used by the parser
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.SDK.ParserReflection.#ctor(System.Type)">
            <summary>
            Initializes this parser reflection
            </summary>
            <param name="parserType">The parser's type</param>
        </member>
        <member name="M:Hime.CentralDogma.SDK.ParserReflection.LoadLRk(System.IO.BinaryReader)">
            <summary>
            Loads the automaton as a LR(k) automaton
            </summary>
            <param name="reader">The input reader</param>
        </member>
        <member name="M:Hime.CentralDogma.SDK.ParserReflection.LoadRNGLR(System.IO.BinaryReader)">
            <summary>
            Loads the automaton as a RNGLR automaton
            </summary>
            <param name="reader">The input reader</param>
        </member>
        <member name="P:Hime.CentralDogma.SDK.ParserReflection.Terminals">
            <summary>
            Gets the terminals that can be matched by the associated lexer
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.SDK.ParserReflection.Variables">
            <summary>
            Gets the variable symbols used by this parser
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.SDK.ParserReflection.Virtuals">
            <summary>
            Gets the virtual symbols used by this parser
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.SDK.ParserReflection.Automaton">
            <summary>
            Gets this parser's LR automaton
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Input.HimeGrammarLexer">
            <summary>
            Represents a lexer
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarLexer.automaton">
            <summary>
            The automaton for this lexer
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarLexer.terminals">
            <summary>
            The collection of terminals matched by this lexer
            </summary>
            <remarks>
            The terminals are in an order consistent with the automaton,
            so that terminal indices in the automaton can be used to retrieve the terminals in this table
            </remarks>
        </member>
        <member name="M:Hime.CentralDogma.Input.HimeGrammarLexer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the lexer
            </summary>
            <param name="input">The lexer's input</param>
        </member>
        <member name="M:Hime.CentralDogma.Input.HimeGrammarLexer.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the lexer
            </summary>
            <param name="input">The lexer's input</param>
        </member>
        <member name="T:Hime.CentralDogma.Input.HimeGrammarLexer.ID">
            <summary>
            Contains the constant IDs for the terminals for this lexer
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarLexer.ID.NAME">
            <summary>
            The unique identifier for terminal NAME
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarLexer.ID.LITERAL_ANY">
            <summary>
            The unique identifier for terminal LITERAL_ANY
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarLexer.ID.OPERATOR_OPTIONAL">
            <summary>
            The unique identifier for terminal OPERATOR_OPTIONAL
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarLexer.ID.OPERATOR_ZEROMORE">
            <summary>
            The unique identifier for terminal OPERATOR_ZEROMORE
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarLexer.ID.OPERATOR_ONEMORE">
            <summary>
            The unique identifier for terminal OPERATOR_ONEMORE
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarLexer.ID.OPERATOR_UNION">
            <summary>
            The unique identifier for terminal OPERATOR_UNION
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarLexer.ID.OPERATOR_DIFFERENCE">
            <summary>
            The unique identifier for terminal OPERATOR_DIFFERENCE
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarLexer.ID.TREE_ACTION_PROMOTE">
            <summary>
            The unique identifier for terminal TREE_ACTION_PROMOTE
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarLexer.ID.TREE_ACTION_DROP">
            <summary>
            The unique identifier for terminal TREE_ACTION_DROP
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarLexer.ID.SEPARATOR">
            <summary>
            The unique identifier for terminal SEPARATOR
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarLexer.ID.INTEGER">
            <summary>
            The unique identifier for terminal INTEGER
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarLexer.ID.LITERAL_STRING">
            <summary>
            The unique identifier for terminal LITERAL_STRING
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarLexer.ID.UNICODE_SPAN_MARKER">
            <summary>
            The unique identifier for terminal UNICODE_SPAN_MARKER
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarLexer.ID.ESCAPEES">
            <summary>
            The unique identifier for terminal ESCAPEES
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarLexer.ID.UNICODE_CODEPOINT">
            <summary>
            The unique identifier for terminal UNICODE_CODEPOINT
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarLexer.ID.LITERAL_CLASS">
            <summary>
            The unique identifier for terminal LITERAL_CLASS
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarLexer.ID.LITERAL_TEXT">
            <summary>
            The unique identifier for terminal LITERAL_TEXT
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarLexer.ID.UNICODE_BLOCK">
            <summary>
            The unique identifier for terminal UNICODE_BLOCK
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarLexer.ID.UNICODE_CATEGORY">
            <summary>
            The unique identifier for terminal UNICODE_CATEGORY
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarLexer.ID.BLOCK_RULES">
            <summary>
            The unique identifier for terminal BLOCK_RULES
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarLexer.ID.BLOCK_OPTIONS">
            <summary>
            The unique identifier for terminal BLOCK_OPTIONS
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarLexer.ID.BLOCK_TERMINALS">
            <summary>
            The unique identifier for terminal BLOCK_TERMINALS
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Input.HimeGrammarParser">
            <summary>
            Represents a parser
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.automaton">
            <summary>
            The automaton for this parser
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.variables">
            <summary>
            The collection of variables matched by this parser
            </summary>
            <remarks>
            The variables are in an order consistent with the automaton,
            so that variable indices in the automaton can be used to retrieve the variables in this table
            </remarks>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.virtuals">
            <summary>
            The collection of virtuals matched by this parser
            </summary>
            <remarks>
            The virtuals are in an order consistent with the automaton,
            so that virtual indices in the automaton can be used to retrieve the virtuals in this table
            </remarks>
        </member>
        <member name="M:Hime.CentralDogma.Input.HimeGrammarParser.#ctor(Hime.CentralDogma.Input.HimeGrammarLexer)">
            <summary>
            Initializes a new instance of the parser
            </summary>
            <param name="lexer">The input lexer</param>
        </member>
        <member name="T:Hime.CentralDogma.Input.HimeGrammarParser.ID">
            <summary>
            Contains the constant IDs for the variables and virtuals in this parser
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.option">
            <summary>
            The unique identifier for variable option
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.terminal_def_atom">
            <summary>
            The unique identifier for variable terminal_def_atom
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.terminal_def_element">
            <summary>
            The unique identifier for variable terminal_def_element
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.terminal_def_cardinalilty">
            <summary>
            The unique identifier for variable terminal_def_cardinalilty
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.terminal_def_repetition">
            <summary>
            The unique identifier for variable terminal_def_repetition
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.terminal_def_fragment">
            <summary>
            The unique identifier for variable terminal_def_fragment
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.terminal_def_restrict">
            <summary>
            The unique identifier for variable terminal_def_restrict
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.terminal_definition">
            <summary>
            The unique identifier for variable terminal_definition
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.terminal">
            <summary>
            The unique identifier for variable terminal
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.rule_sym_action">
            <summary>
            The unique identifier for variable rule_sym_action
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.rule_sym_virtual">
            <summary>
            The unique identifier for variable rule_sym_virtual
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.rule_sym_ref_params">
            <summary>
            The unique identifier for variable rule_sym_ref_params
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.rule_sym_ref_template">
            <summary>
            The unique identifier for variable rule_sym_ref_template
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.rule_sym_ref_simple">
            <summary>
            The unique identifier for variable rule_sym_ref_simple
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.rule_def_atom">
            <summary>
            The unique identifier for variable rule_def_atom
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.rule_def_element">
            <summary>
            The unique identifier for variable rule_def_element
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.rule_def_tree_action">
            <summary>
            The unique identifier for variable rule_def_tree_action
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.rule_def_repetition">
            <summary>
            The unique identifier for variable rule_def_repetition
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.rule_def_fragment">
            <summary>
            The unique identifier for variable rule_def_fragment
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.rule_def_choice">
            <summary>
            The unique identifier for variable rule_def_choice
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.rule_definition">
            <summary>
            The unique identifier for variable rule_definition
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.rule_template_params">
            <summary>
            The unique identifier for variable rule_template_params
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.cf_rule_template">
            <summary>
            The unique identifier for variable cf_rule_template
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.cf_rule_simple">
            <summary>
            The unique identifier for variable cf_rule_simple
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.grammar_options">
            <summary>
            The unique identifier for variable grammar_options
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.grammar_terminals">
            <summary>
            The unique identifier for variable grammar_terminals
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.grammar_cf_rules">
            <summary>
            The unique identifier for variable grammar_cf_rules
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.grammar_parency">
            <summary>
            The unique identifier for variable grammar_parency
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.cf_grammar">
            <summary>
            The unique identifier for variable cf_grammar
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.file">
            <summary>
            The unique identifier for variable file
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID._Axiom_">
            <summary>
            The unique identifier for variable _Axiom_
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.range">
            <summary>
            The unique identifier for virtual range
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.concat">
            <summary>
            The unique identifier for virtual concat
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.HimeGrammarParser.ID.emptypart">
            <summary>
            The unique identifier for virtual emptypart
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.Action">
            <summary>
            Represents a symbol for a semantic action in a grammar
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.Symbol">
            <summary>
            Represents a symbol in a grammar
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Symbol.#ctor(System.Int32,System.String)">
            <summary>
            Initializes this symbol
            </summary>
            <param name="sid">The symbol's unique identifier</param>
            <param name="name">The symbol's name</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Symbol.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Hime.CentralDogma.Grammars.Symbol"/> object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Symbol.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Hime.CentralDogma.Grammars.Symbol"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:Hime.CentralDogma.Grammars.Symbol"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:Hime.CentralDogma.Grammars.Symbol"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Symbol.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Grammars.Symbol"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Grammars.Symbol"/>.
            </returns>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Symbol.ID">
            <summary>
            Gets the unique indentifier (within a grammar) of this symbol
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Symbol.Name">
            <summary>
            Gets the name of this symbol
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.Symbol.EqualityComparer">
            <summary>
            Represents an equality comparer for grammar symbols
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Symbol.EqualityComparer.Equals(Hime.CentralDogma.Grammars.Symbol,Hime.CentralDogma.Grammars.Symbol)">
            <summary>
            Checks whether two symbols are the same
            </summary>
            <param name="x">A symbol</param>
            <param name="y">A symbol</param>
            <returns><c>true</c> if the two symbols are the same</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Symbol.EqualityComparer.GetHashCode(Hime.CentralDogma.Grammars.Symbol)">
            <summary>
            Returns a hash code for the specified object
            </summary>
            <param name="obj">The object for which the hash code is to be returned</param>
            <returns>A hash code for the specified object</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Action.#ctor(System.Int32,System.String)">
            <summary>
            Initializes this symbol
            </summary>
            <param name="sid">The symbol's unique identifier</param>
            <param name="name">The symbol's name</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Action.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Grammars.Action"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Grammars.Action"/>.
            </returns>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.Dollar">
            <summary>
            Represents the dollar symbol in a grammar, i.e. the marker of end of input
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.Terminal">
            <summary>
            Represents a terminal symbol in a grammar
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Terminal.#ctor(System.Int32,System.String,System.String,Hime.CentralDogma.Automata.NFA)">
            <summary>
            Initializes this symbol
            </summary>
            <param name="sid">The symbol's unique identifier</param>
            <param name="name">The symbol's name</param>
            <param name="value">The symbol's inline value</param>
            <param name="nfa">The symbol's name</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Terminal.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Grammars.Terminal"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Grammars.Terminal"/>.
            </returns>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Terminal.Value">
            <summary>
            Gets or sets the inline value of this terminal
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Terminal.NFA">
            <summary>
            Gets or sets the NFA that is used to match this terminal
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Terminal.Priority">
            <summary>
             Gets the priority of this marker 
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.Terminal.PriorityComparer">
            <summary>
            Represents a comparer that works on the priority of the terminals
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Terminal.PriorityComparer.Compare(Hime.CentralDogma.Grammars.Terminal,Hime.CentralDogma.Grammars.Terminal)">
            <summary>
            Compare the specified terminals
            </summary>
            <param name="x">A terminal</param>
            <param name="y">A terminal</param>
            <returns>A value representing the order of the two terminals</returns>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Dollar.instance">
            <summary>
            The singleton instance
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Dollar.#ctor">
            <summary>
            Initializes the singleton
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Dollar.Instance">
            <summary>
            Gets the the singleton instance
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.Dummy">
            <summary>
            Represents a fake terminal, used as a marker by LR-related algorithms
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Dummy.instance">
            <summary>
            The singleton instance
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Dummy.#ctor">
            <summary>
            Initializes the singleton
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Dummy.Instance">
            <summary>
            Gets the the singleton instance
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.Epsilon">
            <summary>
            Represents the epsilon symbol in a grammar, i.e. a terminal with an empty value
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Epsilon.instance">
            <summary>
            The singleton instance
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Epsilon.#ctor">
            <summary>
            Initializes the singleton
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Epsilon.Instance">
            <summary>
            Gets the the singleton instance
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.Virtual">
            <summary>
            Represents a virtual symbol in a grammar
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Virtual.#ctor(System.Int32,System.String)">
            <summary>
            Initializes this symbol
            </summary>
            <param name="sid">The symbol's unique identifier</param>
            <param name="name">The symbol's name</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Virtual.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Grammars.Virtual"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Grammars.Virtual"/>.
            </returns>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.Variable">
            <summary>
            Represents a variable in a grammar
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Variable.rules">
            <summary>
            The rules for this variable
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Variable.firsts">
            <summary>
            The FIRSTS set for this variable
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Variable.followers">
            <summary>
            The FOLLOWERS set for this variable
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Variable.#ctor(System.Int32,System.String)">
            <summary>
            Initializes this symbol
            </summary>
            <param name="sid">The symbol's unique identifier</param>
            <param name="name">The symbol's name</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Variable.AddRule(Hime.CentralDogma.Grammars.Rule)">
            <summary>
            Adds the given rule for this variable as a unique element
            </summary>
            <param name="rule">The rule to add</param>
            <returns>The given rule, or the equivalent one if it already existed in this variable</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Variable.ComputeFirsts">
            <summary>
            Computes the FIRSTS set for this variable
            </summary>
            <returns><c>true</c> if there has been modifications</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Variable.ComputeFollowers_Step1">
            <summary>
            Computes the FOLLOWERS sets, step 1
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Variable.ComputeFollowers_Step23">
            <summary>
            Computes the FOLLOWERS sets, step2
            </summary>
            <returns><c>true</c> if there has been modifications</returns>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Variable.Rules">
            <summary>
            Gets the rules for this variables
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Variable.Firsts">
            <summary>
            Gets the FIRSTS set of this variable
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Variable.Followers">
            <summary>
            Gets the FOLLOWERS set of this variable
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.TerminalSet">
            <summary>
            Represents a set of unique terminals (sorted by ID)
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.TerminalSet.content">
            <summary>
            The backing content
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.TerminalSet.#ctor">
            <summary>
            Initializes this set as empty
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.TerminalSet.#ctor(Hime.CentralDogma.Grammars.TerminalSet)">
            <summary>
            Initializes this set as a copy of the given set
            </summary>
            <param name="copied">The set to copy</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.TerminalSet.Add(Hime.CentralDogma.Grammars.Terminal)">
            <summary>
            Adds the specified item
            </summary>
            <param name="item">The item to add to the current collection</param>
            <returns><c>true</c> if the item was added, <c>false</c> otherwise because an item with the same ID was already present</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.TerminalSet.AddRange(System.Collections.Generic.IEnumerable{Hime.CentralDogma.Grammars.Terminal})">
            <summary>
            Adds the specified items
            </summary>
            <param name="collection">The items to add to the current collection</param>
            <returns><c>true</c> if at least one item was added</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.TerminalSet.IndexOf(Hime.CentralDogma.Grammars.Terminal)">
            <summary>
            Determines the index of a specific item in the current instance
            </summary>
            <param name="item">An item</param>
            <returns>The index of the item</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.TerminalSet.Insert(System.Int32,Hime.CentralDogma.Grammars.Terminal)">
            <summary>
            Insert the specified item at the specified index
            </summary>
            <param name="index">The index to insert at</param>
            <param name="item">The item to insert</param>
            <remarks>This method is not supported</remarks>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.TerminalSet.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index
            </summary>
            <param name="index">An index in this collection</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.TerminalSet.System#Collections#Generic#ICollection{Hime#CentralDogma#Grammars#Terminal}#Add(Hime.CentralDogma.Grammars.Terminal)">
            <summary>
            Adds the specified item
            </summary>
            <param name="item">The item to add to the current collection</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.TerminalSet.Clear">
            <summary>
            Removes all items from this collection
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.TerminalSet.Contains(Hime.CentralDogma.Grammars.Terminal)">
            <summary>
            Determines whether the current collection contains a specific value
            </summary>
            <param name="item">The object to locate in the current collection</param>
            <returns>Whether the collection contains the specified item</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.TerminalSet.CopyTo(Hime.CentralDogma.Grammars.Terminal[],System.Int32)">
            <summary>
            Copies the content of this collection to an array
            </summary>
            <param name="array">The array to copy to</param>
            <param name="arrayIndex">The starting index in the provided array</param>
            <remarks>This method is not supported</remarks>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.TerminalSet.Remove(Hime.CentralDogma.Grammars.Terminal)">
            <summary>
            Removes the first occurrence of an item from the current collection
            </summary>
            <param name="item">The item to remove</param>
            <returns>Whether the item was present and was removed from this collection</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.TerminalSet.GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.TerminalSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.TerminalSet.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Grammars.TerminalSet"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Grammars.TerminalSet"/>.
            </returns>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.TerminalSet.Item(System.Int32)">
            <summary>
            Gets the item at the specified index
            </summary>
            <param name="index">An index in this collection</param>
            <remarks>The set operation is not supported</remarks>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.TerminalSet.Count">
            <summary>
            Gets the number of items in this collection
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.TerminalSet.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.NullTerminal">
            <summary>
            Represents the absence of terminal, used as a marker by LR-related algorithms
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.NullTerminal.instance">
            <summary>
            The singleton instance
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.NullTerminal.#ctor">
            <summary>
            Initializes the singleton
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.NullTerminal.Instance">
            <summary>
            Gets the the singleton instance
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.Rule">
            <summary>
            Represents a grammar rule
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Rule.head">
            <summary>
            The rule's head variable
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Rule.body">
            <summary>
            The rule's body
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Rule.generated">
            <summary>
            Whether this rule has been generated
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Rule.#ctor(Hime.CentralDogma.Grammars.Variable,Hime.CentralDogma.Grammars.RuleBody,System.Boolean)">
            <summary>
            Initializes this rule
            </summary>
            <param name='head'>The rule's head</param>
            <param name='body'>The rule's body</param>
            <param name='generated'>Whether this rule is generated</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Rule.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Hime.CentralDogma.Grammars.Rule"/> object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Rule.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Hime.CentralDogma.Grammars.Rule"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:Hime.CentralDogma.Grammars.Rule"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:Hime.CentralDogma.Grammars.Rule"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Rule.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Grammars.Rule"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Grammars.Rule"/>.
            </returns>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Rule.Head">
            <summary>
            Gets the rule's head variable
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Rule.Body">
            <summary>
            Gets the rule's body
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Rule.IsGenerated">
            <summary>
            Gets a value indicating whether the rule is generated
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.RuleBody">
            <summary>
            Represents the body of a grammar rule
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.RuleChoice">
            <summary>
            Represents a choice in a rule, i.e. the remainder of a rule's body
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.RuleChoice.parts">
            <summary>
            The elements in this body
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.RuleChoice.setFirsts">
            <summary>
            The FIRSTS set of terminals
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.RuleChoice.#ctor">
            <summary>
            Initializes this body as empty
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.RuleChoice.#ctor(Hime.CentralDogma.Grammars.Symbol)">
            <summary>
            Initializes this body as containing a single element
            </summary>
            <param name="symbol">The single element's symbol</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.RuleChoice.GetEnumerator">
            <summary>
            Gets the enumerator of the inner parts
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.RuleChoice.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator of the inner parts
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.RuleChoice.Append(Hime.CentralDogma.Grammars.Symbol)">
            <summary>
            Append the specified element
            </summary>
            <param name="element">An element</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.RuleChoice.ComputeFirsts(Hime.CentralDogma.Grammars.RuleChoice)">
            <summary>
            Computes the FIRSTS set for this rule body
            </summary>
            <returns><c>true</c> if there has been modifications</returns>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.RuleChoice.Length">
            <summary>
            Gets the length of this body
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.RuleChoice.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The index of an element</param>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.RuleChoice.Firsts">
            <summary>
            Gets the FIRSTS set
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.RuleBody.choices">
            <summary>
            The choices in this body
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.RuleBody.#ctor">
            <summary>
            Initializes this body as empty
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.RuleBody.#ctor(Hime.CentralDogma.Grammars.Symbol)">
            <summary>
            Initializes this body as containing a single element
            </summary>
            <param name="symbol">The single element's symbol</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.RuleBody.#ctor(System.Collections.Generic.ICollection{Hime.CentralDogma.Grammars.RuleBodyElement})">
            <summary>
            Initializes this body as a copy of the given elements
            </summary>
            <param name="parts">The elements to copy</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.RuleBody.ComputeFirsts">
            <summary>
            Computes the FIRSTS set for this rule body
            </summary>
            <returns><c>true</c> if there has been modifications</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.RuleBody.ComputeChoices">
            <summary>
            Computes the choices for this rule body
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.RuleBody.ComputeFollowers_Step1">
            <summary>
            Computes the FOLLOWERS sets, step 1
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.RuleBody.ComputeFollowers_Step23(Hime.CentralDogma.Grammars.Variable)">
            <summary>
            Computes the FOLLOWERS sets, step2
            </summary>
            <param name='ruleVar'>The head variable of this rule's body</param>
            <returns><c>true</c> if there has been modifications</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.RuleBody.ApplyAction(Hime.Redist.TreeAction)">
            <summary>
            Applies the given action to all elements in this body
            </summary>
            <param name="action">The action to apply</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.RuleBody.Concatenate(Hime.CentralDogma.Grammars.RuleBody,Hime.CentralDogma.Grammars.RuleBody)">
            <summary>
            Produces the concatenation of the left and right bodies
            </summary>
            <param name='left'>The left rule body</param>
            <param name='right'>The right rule body</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.RuleBody.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Hime.CentralDogma.Grammars.RuleBody"/> object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.RuleBody.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Hime.CentralDogma.Grammars.RuleBody"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:Hime.CentralDogma.Grammars.RuleBody"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:Hime.CentralDogma.Grammars.RuleBody"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.RuleBody.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Grammars.RuleBody"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Grammars.RuleBody"/>.
            </returns>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.RuleBody.Choices">
            <summary>
            Gets the choices in this rule
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.RuleBodyElement">
            <summary>
            Represents an element in the body of a grammar rule
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.RuleBodyElement.symbol">
            <summary>
            The symbol of this element
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.RuleBodyElement.action">
            <summary>
            The action applied on this element
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.RuleBodyElement.#ctor(Hime.CentralDogma.Grammars.Symbol,Hime.Redist.TreeAction)">
            <summary>
            Initializes this element
            </summary>
            <param name="symbol">The element's symbol</param>
            <param name="action">The action applied on the element</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.RuleBodyElement.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Hime.CentralDogma.Grammars.RuleBodyElement"/> object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.RuleBodyElement.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Hime.CentralDogma.Grammars.RuleBodyElement"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:Hime.CentralDogma.Grammars.RuleBodyElement"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:Hime.CentralDogma.Grammars.RuleBodyElement"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.RuleBodyElement.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Grammars.RuleBodyElement"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Grammars.RuleBodyElement"/>.
            </returns>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.RuleBodyElement.Symbol">
            <summary>
            Gets the symbol of this element
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.RuleBodyElement.Action">
            <summary>
            Gets or sets the action applied on this element
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.RuleBodySet">
            <summary>
            Represents an ordered set of grammar rule bodies
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.RuleBodySet.Union(Hime.CentralDogma.Grammars.RuleBodySet,Hime.CentralDogma.Grammars.RuleBodySet)">
            <summary>
            Builds the union of the left and right set
            </summary>
            <param name="left">A set of rule bodies</param>
            <param name="right">A set of rule bodies</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.RuleBodySet.Multiply(Hime.CentralDogma.Grammars.RuleBodySet,Hime.CentralDogma.Grammars.RuleBodySet)">
            <summary>
            Builds the product of the left and right set
            </summary>
            <param name="left">A set of rule bodies</param>
            <param name="right">A set of rule bodies</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.RuleBodySet.ApplyAction(Hime.Redist.TreeAction)">
            <summary>
            Applies the given action to all bodies in this set
            </summary>
            <param name="action">The action to apply</param>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.TemplateRule">
            <summary>
            Represents a template rule in a grammar
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.TemplateRule.instances">
            <summary>
            The existing instances of this template rule
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.TemplateRule.grammar">
            <summary>
            The parent grammar
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.TemplateRule.head">
            <summary>
            The name of the head variable
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.TemplateRule.parameters">
            <summary>
            The list of the parameters
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.TemplateRule.root">
            <summary>
            The root AST for the definition of this rule
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.TemplateRule.#ctor(Hime.CentralDogma.Grammars.Grammar,Hime.Redist.ASTNode)">
            <summary>
            Initializes this template rule
            </summary>
            <param name="grammar">The parent grammar</param>
            <param name="ruleNode">The root AST for this rule</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.TemplateRule.#ctor(Hime.CentralDogma.Grammars.TemplateRule,Hime.CentralDogma.Grammars.Grammar)">
            <summary>
            Initializes this template rule as copy of another root
            </summary>
            <param name="copied">The copied template rule</param>
            <param name="grammar">The parent grammar</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.TemplateRule.Instantiate(Hime.CentralDogma.Grammars.Context,System.Collections.Generic.List{Hime.CentralDogma.Grammars.Symbol})">
            <summary>
            Instantiate this rule with the given context
            </summary>
            <param name="context">The context</param>
            <param name="parameters">The parameter values</param>
            <returns>The generated variable containing the instantiated rule</returns>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.TemplateRule.HeadName">
            <summary>
            Gets the name of the head variable
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.TemplateRule.Parameters">
            <summary>
            Gets the parameters of this rule
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.TemplateRule.RuleNode">
            <summary>
            Gets root AST node for this rule
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.TemplateRule.DefinitionNode">
            <summary>
            Gets AST node for this rule's definition (body)
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.TemplateRuleInstance">
            <summary>
            Represents the instance of a template rule
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.TemplateRuleInstance.templateRule">
            <summary>
            The parent rule
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.TemplateRuleInstance.variable">
            <summary>
            The produced variable
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.TemplateRuleInstance.parameters">
            <summary>
            The parameter values
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.TemplateRuleInstance.#ctor(Hime.CentralDogma.Grammars.TemplateRule,System.Collections.Generic.List{Hime.CentralDogma.Grammars.Symbol},Hime.CentralDogma.Grammars.Grammar)">
            <summary>
            Initializes this template rule instance
            </summary>
            <param name="tRule">The parent template rule</param>
            <param name="parameters">The values for the template rule parameters</param>
            <param name="grammar">The parent grammar</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.TemplateRuleInstance.Compile(Hime.CentralDogma.Grammars.Grammar,Hime.CentralDogma.Grammars.Context)">
            <summary>
            Compile this rule and generate the associated grammar rule
            </summary>
            <param name="grammar">The parent grammar</param>
            <param name="context">The current context</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.TemplateRuleInstance.MatchParameters(System.Collections.Generic.List{Hime.CentralDogma.Grammars.Symbol})">
            <summary>
            Determines whether the given parameter values match this instance
            </summary>
            <param name="parameters">The parameter values to check</param>
            <returns><c>true</c> if the parameters match</returns>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.TemplateRuleInstance.HeadVariable">
            <summary>
            Gets the head variable for this rule
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.TemplateRuleInstance.Parameters">
            <summary>
            Gets the parameter values
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.Context">
            <summary>
            Represents the context of a loader
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Context.loader">
            <summary>
            The loader
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Context.templateRules">
            <summary>
            The current template rules
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Context.references">
            <summary>
            The binding of template parameters to their value
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Context.#ctor(Hime.CentralDogma.Grammars.Loader)">
            <summary>
            Initializes this context
            </summary>
            <param name="loader">The parent loader</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Context.#ctor(Hime.CentralDogma.Grammars.Context)">
            <summary>
            Initializes this context from a parent one
            </summary>
            <param name="copied">The context to copy</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Context.AddTemplateRule(Hime.CentralDogma.Grammars.TemplateRule)">
            <summary>
            Adds a template rule to this context
            </summary>
            <param name="templateRule">A template rule</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Context.IsTemplateRule(System.String,System.Int32)">
            <summary>
            Determines whether this context has a templat rule of the given name with the number of parameters
            </summary>
            <param name="name">A template rule's name</param>
            <param name="paramCount">The number of parameters</param>
            <returns><c>true</c> if a matching template rule is found</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Context.InstantiateMetaRule(System.String,System.Collections.Generic.List{Hime.CentralDogma.Grammars.Symbol})">
            <summary>
            Gets the variable produced by a template rule's instantiation
            </summary>
            <param name="name">A template rule's name</param>
            <param name="parameters">The parameter values</param>
            <returns>The variable produced by the template rule's instatiation</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Context.AddBinding(System.String,Hime.CentralDogma.Grammars.Symbol)">
            <summary>
            Adds a binding to this context
            </summary>
            <param name="name">The bound name</param>
            <param name="symbol">The value associated to the name</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Context.IsBound(System.String)">
            <summary>
            Determines whether the given name is bound in this context
            </summary>
            <param name="name">A name</param>
            <returns><c>true</c> if the given name is bound in this context; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Context.GetBinding(System.String)">
            <summary>
            Gets the value bound to the given name
            </summary>
            <param name="name">A name</param>
            <returns>The bound value</returns>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Context.Loader">
            <summary>
            Gets the loader to which this context is associated
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Report">
            <summary>
            Represents a compilation report
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Report.infos">
            <summary>
            The list of info messages in this report
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Report.warnings">
            <summary>
            The list of warnings in this report
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Report.errors">
            <summary>
            The list of errors in this report
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Report.#ctor">
            <summary>
            Initializes a new report
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Report.AddInfo(System.Object)">
            <summary>
            Adds a new info entry
            </summary>
            <param name="message">The info message</param>
        </member>
        <member name="M:Hime.CentralDogma.Report.AddWarning(System.Object)">
            <summary>
            Adds a new warning entry
            </summary>
            <param name="message">The warning message</param>
        </member>
        <member name="M:Hime.CentralDogma.Report.AddError(System.Object)">
            <summary>
            Adds a new error entry
            </summary>
            <param name="message">The error message</param>
        </member>
        <member name="P:Hime.CentralDogma.Report.Infos">
            <summary>
            Gets the informational entries in this report
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Report.Warnings">
            <summary>
            Gets the informational entries in this report
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Report.Errors">
            <summary>
            Gets the informational entries in this report
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Reporter">
            <summary>
            Represents a logger producing a compilation report
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Reporter.report">
            <summary>
            The resulting report
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Reporter.#ctor">
            <summary>
            Initializes the reporter for the given type
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Reporter.Info(System.Object)">
            <summary>
            Adds a new info entry to the log
            </summary>
            <param name="message">The info message</param>
        </member>
        <member name="M:Hime.CentralDogma.Reporter.Info(System.Object,Hime.Redist.Text,Hime.Redist.TextPosition)">
            <summary>
            Adds a new info entry in the log
            </summary>
            <param name="message">The error message</param>
            <param name="input">The input raising the message</param>
            <param name="position">The position within the input</param>
        </member>
        <member name="M:Hime.CentralDogma.Reporter.Warn(System.Object)">
            <summary>
            Adds a new warning entry in the log
            </summary>
            <param name="message">The warning message</param>
        </member>
        <member name="M:Hime.CentralDogma.Reporter.Warn(System.Object,Hime.Redist.Text,Hime.Redist.TextPosition)">
            <summary>
            Adds a new warning entry in the log
            </summary>
            <param name="message">The error message</param>
            <param name="input">The input raising the message</param>
            <param name="position">The position within the input</param>
        </member>
        <member name="M:Hime.CentralDogma.Reporter.Error(System.Object)">
            <summary>
            Adds a new error entry in the log
            </summary>
            <param name="message">The error message</param>
        </member>
        <member name="M:Hime.CentralDogma.Reporter.Error(System.Object,Hime.Redist.Text,Hime.Redist.TextPosition)">
            <summary>
            Adds a new error entry in the log
            </summary>
            <param name="message">The error message</param>
            <param name="input">The input raising the message</param>
            <param name="position">The position within the input</param>
        </member>
        <member name="M:Hime.CentralDogma.Reporter.OutputContext(Hime.Redist.Text,Hime.Redist.TextPosition)">
            <summary>
            Outputs the context of a message in the console
            </summary>
            <param name="input">The input raising the message</param>
            <param name="position">The position within the input</param>
        </member>
        <member name="P:Hime.CentralDogma.Reporter.Result">
            <summary>
            Gets the current report
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.Phrase">
            <summary>
            Represents a phrase that can be produced by grammar.
            It is essentially a list of terminals
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Phrase.content">
            <summary>
            The content
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Phrase.#ctor">
            <summary>
            Initializes an empty phrase
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Phrase.#ctor(Hime.CentralDogma.Grammars.Phrase)">
            <summary>
            Initializes a phrase a a copy of another
            </summary>
            <param name="copied">The phrase to copy</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Phrase.GetEnumerator">
            <summary>
            Gets the enumerator of terminals in this phrase
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Phrase.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator of terminals in this phrase
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Phrase.Append(Hime.CentralDogma.Grammars.Terminal)">
            <summary>
            Appends the specified terminal to this phrase
            </summary>
            <param name="terminal">The terminal to append</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Phrase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Grammars.Phrase"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Grammars.Phrase"/>.
            </returns>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Phrase.Length">
            <summary>
            Gets the length of this phrase
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Phrase.Item(System.Int32)">
            <summary>
            Gets the terminal at the given index in this phrase
            </summary>
            <param name="index">An index in this phrase</param>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.Conflict">
            <summary>
            Represents a LR conflict
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.Conflict.state">
            <summary>
            The state raising this conflict
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.Conflict.type">
            <summary>
            The conflict's type
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.Conflict.lookahead">
            <summary>
            The conflictuous lookahead
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.Conflict.items">
            <summary>
            The set of conflictuous items
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.Conflict.examples">
            <summary>
            The example of conflictuous input
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Conflict.#ctor(Hime.CentralDogma.Grammars.LR.State,Hime.CentralDogma.Grammars.LR.ConflictType,Hime.CentralDogma.Grammars.Terminal)">
            <summary>
            Initializes this conflict
            </summary>
            <param name="state">The state raising the state</param>
            <param name="type">The type of conflict</param>
            <param name="lookahead">The conflictuous lookahead</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Conflict.#ctor(Hime.CentralDogma.Grammars.LR.State,Hime.CentralDogma.Grammars.LR.ConflictType)">
            <summary>
            Initializes this conflict
            </summary>
            <param name="state">The state raising the state</param>
            <param name="type">The type of conflict</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Conflict.AddItem(Hime.CentralDogma.Grammars.LR.Item)">
            <summary>
            Adds a conflictuous item to this conflict
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Conflict.AddExample(Hime.CentralDogma.Grammars.Phrase)">
            <summary>
            Adds an input example to this conflict
            </summary>
            <param name="example">The example to add</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Conflict.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Grammars.LR.Conflict"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Grammars.LR.Conflict"/>.
            </returns>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.Conflict.State">
            <summary>
            Gets the state raising this conflict
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.Conflict.ConflictType">
            <summary>
            Gets the type of the conflict
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.Conflict.ConflictSymbol">
            <summary>
            Gets the conflictuous terminal
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.Conflict.Items">
            <summary>
            Gets the list of conflictuous items
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.Conflict.Examples">
            <summary>
            Gets a list of examples of conflictuous examples
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.ConflictType">
            <summary>
            Represents the type of a LR conflict
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.ConflictType.ShiftReduce">
            <summary>
            Represents a Shift-Reduce conflict
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.ConflictType.ReduceReduce">
            <summary>
            Represents a Reduce-Reduce conflict
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.GLRSimulator">
            <summary>
            Represents a simulator of GLR parsers
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.GraphInverse">
            <summary>
            Represents the inverse graph of an LR graph
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.GraphInverse.graph">
            <summary>
            The original graph
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.GraphInverse.inverseGraph">
            <summary>
            The inverse graph
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.GraphInverse.HasIncomings(System.Int32)">
            <summary>
            Determines whether the given state has incoming transitions
            </summary>
            <param name="target">The target state to investigate</param>
            <returns><c>true</c> if this target has an incoming transition; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.GraphInverse.GetIncomings(System.Int32)">
            <summary>
            Gets the incoming transition labels to the given state
            </summary>
            <param name="target">The target state to investigate</param>
            <returns>The label in the incoming transitions</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.GraphInverse.GetOrigins(System.Int32,Hime.CentralDogma.Grammars.Symbol)">
            <summary>
            Gets the origins of the incoming transitions to the given state
            </summary>
            <param name="target">The target state to investigate</param>
            <param name="transition">The symbol to look for on the transitions</param>
            <returns>The origins of the incoming transitions</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.GraphInverse.#ctor(Hime.CentralDogma.Grammars.LR.Graph)">
            <summary>
            Initializes the inverse graph from a given LR graph
            </summary>
            <param name="graph">The to inverse</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.GraphInverse.BuildInverse">
            <summary>
            Builds the inverse data
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.GLRSimulator.#ctor(Hime.CentralDogma.Grammars.LR.Graph)">
            <summary>
            Initializes this simulator from the specified LR graph
            </summary>
            <param name='graph'>The LR graph to simulate</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.GLRSimulator.Simulate(Hime.CentralDogma.Grammars.LR.GLRGeneration,Hime.CentralDogma.Grammars.Terminal)">
            <summary>
            Simulates the parser from the given generation on the specified lookahead
            </summary>
            <param name="from">The generation to start from</param>
            <param name="lookahead">The lookahead to simulate on</param>
            <returns>The generation produced by the simulation</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.GLRSimulator.Simulate(Hime.CentralDogma.Grammars.LR.State,Hime.CentralDogma.Grammars.LR.Item,Hime.CentralDogma.Grammars.Terminal)">
            <summary>
            Simulates the parser from the given LR state and item on the given lookahead
            </summary>
            <param name="state">A LR state</param>
            <param name="item">A LR item in the state</param>
            <param name="lookahead">The lookahead to simulate on</param>
            <returns>The generation produced by the simulation</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.GLRSimulator.GetOrigin(Hime.CentralDogma.Grammars.LR.GLRStackNode,Hime.CentralDogma.Grammars.RuleChoice)">
            <summary>
            Gets a generation likely to represent an ancestor of the one containing the given stack node
            </summary>
            <param name="node">A stack node</param>
            <param name="definition">A rule definition</param>
            <returns>A generation likely to represent an ancestor of the one containing the given stack node</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.GLRSimulator.GetOrigin(Hime.CentralDogma.Grammars.LR.GLRGeneration,Hime.CentralDogma.Grammars.RuleChoice)">
            <summary>
            Gets a generation likely to represent an ancestor of the given one following the given rule definition
            </summary>
            <param name="current">A generation</param>
            <param name="definition">A rule definition</param>
            <returns>A generation likely to represent an ancestor of the given one following the specified rule definition</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.GLRSimulator.GetOrigin(Hime.CentralDogma.Grammars.LR.GLRGeneration,Hime.CentralDogma.Grammars.Symbol)">
            <summary>
            Gets the generation likely to represent an ancestor of the given one by one symbol
            </summary>
            <param name="current">A generation</param>
            <param name="symbol">A symbol</param>
            <returns>A generation likely to represent an ancestor of the given one by one symbol</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.GLRSimulator.GetInputsFor(Hime.CentralDogma.Grammars.LR.State)">
            <summary>
            Gets possible inputs that allows for reaching the specified state from state 0
            </summary>
            <param name="state">A LR state</param>
            <returns>A list of possible inputs for reaching the specified state</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.GLRSimulator.BuildInput(Hime.CentralDogma.Grammars.Phrase,Hime.CentralDogma.Grammars.Variable,System.Collections.Generic.Stack{Hime.CentralDogma.Grammars.RuleChoice})">
            <summary>
            Builds the input by decomposing the given variable
            </summary>
            <param name="sample">The input sample to build</param>
            <param name="var">The variable to decompose</param>
            <param name="stack">The stack of rule definitions currently in use for the decomposition</param>
            <remarks>
            This methods recursively triggers the production of encoutered variables to arrive to the terminal symbols.
            The methods also tries do not go into an infinite loop by keeping track of the rule definitions that are currently used.
            If a rule definition has already been used (is in the stack) the method avoids it
            </remarks>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.GLRSimulator.ENode">
            <summary>
            Queue element for exploring paths in the LR graph
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.GLRSimulator.ENode.state">
            <summary>
            The associated LR state
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.GLRSimulator.ENode.next">
            <summary>
            The next element
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.GLRSimulator.ENode.transition">
            <summary>
            The transition to investigate
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.GLRSimulator.ENode.#ctor(Hime.CentralDogma.Grammars.LR.State,Hime.CentralDogma.Grammars.LR.GLRSimulator.ENode,Hime.CentralDogma.Grammars.Symbol)">
            <summary>
            Initializes this element
            </summary>
            <param name="state">The associated LR state</param>
            <param name="next">The next queue element</param>
            <param name="transition">The transition</param>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.GLRStackNode">
            <summary>
            Represents a node in a Graph-Structured Stack of a simulation of a GLR parser
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.GLRStackNode.state">
            <summary>
            The state represented by this node
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.GLRStackNode.edges">
            <summary>
            The edges from this node
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.GLRStackNode.#ctor(Hime.CentralDogma.Grammars.LR.State)">
            <summary>
            Initializes a node
            </summary>
            <param name="state">The represented state</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.GLRStackNode.AddEdge(Hime.CentralDogma.Grammars.Symbol,Hime.CentralDogma.Grammars.LR.GLRStackNode)">
            <summary>
            Adds an edge to a previous node (if it does not exists already)
            </summary>
            <param name="symbol">The edge's label</param>
            <param name="node">The edge's target</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.GLRStackNode.GetPreviousBy(Hime.CentralDogma.Grammars.Symbol)">
            <summary>
            Gets the previous stack node by an edge labelled with the specified symbol
            </summary>
            <param name="symbol">A symbol</param>
            <returns>The previous stack node, or <c>null</c> if no edge with the specified symbol exists</returns>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.GLRStackNode.ID">
            <summary>
            Gets this node's identifier
            Same as the identifier of the LR state it represents
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.GLRStackNode.State">
            <summary>
            Gets the state represented by this node
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.Graph">
            <summary>
            Represents a LR graph
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.Graph.states">
            <summary>
            The states in this graph
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Graph.#ctor">
            <summary>
            Initializes a new empty graph
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Graph.#ctor(Hime.CentralDogma.Grammars.LR.State)">
            <summary>
            Initializes a graph from the given state
            </summary>
            <param name='state'>The LR state to build from</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Graph.ContainsState(Hime.CentralDogma.Grammars.LR.StateKernel)">
            <summary>
            Determines whether the given state (as a kernel) is already in this graph
            </summary>
            <param name="kernel">A kernel</param>
            <returns>The corresponding state, or null if none is found</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Graph.Add(Hime.CentralDogma.Grammars.LR.State)">
            <summary>
            Adds a state to this graph
            </summary>
            <param name="state">The state to add</param>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.Graph.States">
            <summary>
            Gets the states in this graph
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.Item">
            <summary>
            Represents a base LR item
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.Item.rule">
            <summary>
            The underlying grammar rule
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.Item.position">
            <summary>
            The dot position in the grammar rule
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Item.#ctor(Hime.CentralDogma.Grammars.Rule,System.Int32)">
            <summary>
            Initializes this item
            </summary>
            <param name="rule">The underlying rule</param>
            <param name="position">The dot position in the rule</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Item.GetNextSymbol">
            <summary>
            Gets the symbol following the dot in this item
            </summary>
            <returns>The symbol following the dot</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Item.GetNextChoice">
            <summary>
            Gets rule choice following the dot in this item
            </summary>
            <returns>The choice following the dot</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Item.GetChild">
            <summary>
            Gets the child of this item
            </summary>
            <returns>The child of this item</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Item.CloseTo(System.Collections.Generic.List{Hime.CentralDogma.Grammars.LR.Item},System.Collections.Generic.Dictionary{Hime.CentralDogma.Grammars.Rule,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{Hime.CentralDogma.Grammars.LR.Item}}})">
            <summary>
            Closes this item to a set of items
            </summary>
            <param name="closure">The list to close</param>
            <param name="map">The current helper map</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Item.BaseEquals(Hime.CentralDogma.Grammars.LR.Item)">
            <summary>
            Base equality test for LR items
            </summary>
            <param name="item">The item to test</param>
            <returns>The equality result</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Item.ItemEquals(Hime.CentralDogma.Grammars.LR.Item)">
            <summary>
            Determines whether the specified <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/> is equal to the current <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/>.
            </summary>
            <param name="item">
            The <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/> to compare with the current <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/> is equal to the current
            <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Item.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Item.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/> object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Item.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/>.
            </returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Item.ToString(System.Boolean)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/>.
            </summary>
            <param name="withLookaheads">Whether to show the lookaheads</param>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/>.
            </returns>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.Item.BaseRule">
            <summary>
            Gets the base rule for this item
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.Item.DotPosition">
            <summary>
            Gets the dot position in the grammar rule
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.Item.Action">
            <summary>
            Gets the action code for this item
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.Item.Lookaheads">
            <summary>
            Gets the lookaheads for this item
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.State">
            <summary>
            Represents a LR state
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.State.kernel">
            <summary>
            The state's kernel
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.State.items">
            <summary>
            The state's item
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.State.children">
            <summary>
            The state's children
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.State.reductions">
            <summary>
            The reductions in this state
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.State.#ctor(Hime.CentralDogma.Grammars.LR.StateKernel,System.Collections.Generic.List{Hime.CentralDogma.Grammars.LR.Item})">
            <summary>
            Initializes this state
            </summary>
            <param name="kernel">The state's kernel</param>
            <param name="items">The state's items</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.State.HasTransition(Hime.CentralDogma.Grammars.Symbol)">
            <summary>
            Determines whether this state has a transition triggered by the specified symbol
            </summary>
            <param name="symbol">A transition symbol</param>
            <returns><c>true</c> if this state has a transition triggered by the specified symbol; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.State.GetChildBy(Hime.CentralDogma.Grammars.Symbol)">
            <summary>
            Gets the child of this state by the specified transition
            </summary>
            <param name="symbol">A transition symbol</param>
            <returns>The child by the specified transition</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.State.AddChild(Hime.CentralDogma.Grammars.Symbol,Hime.CentralDogma.Grammars.LR.State)">
            <summary>
            Adds a transition to a child
            </summary>
            <param name="symbol">The transition symbol</param>
            <param name="child">The child state</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.State.BuildGraph(Hime.CentralDogma.Grammars.LR.Graph)">
            <summary>
            Builds the given parent graph
            </summary>
            <param name="graph">The parent graph</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.State.BuildReductions(Hime.CentralDogma.Grammars.LR.StateReductions)">
            <summary>
            Builds the reductions on this state
            </summary>
            <param name="reductions">The reductions to build</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.State.Equals(Hime.CentralDogma.Grammars.LR.State)">
            <summary>
            Determines whether the specified <see cref="T:Hime.CentralDogma.Grammars.LR.State"/> is equal to the
            current <see cref="T:Hime.CentralDogma.Grammars.LR.State"/>.
            </summary>
            <param name="Set">
            The <see cref="T:Hime.CentralDogma.Grammars.LR.State"/> to compare with the current <see cref="T:Hime.CentralDogma.Grammars.LR.State"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:Hime.CentralDogma.Grammars.LR.State"/> is equal to the current
            <see cref="T:Hime.CentralDogma.Grammars.LR.State"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.State.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Hime.CentralDogma.Grammars.LR.State"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:Hime.CentralDogma.Grammars.LR.State"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:Hime.CentralDogma.Grammars.LR.State"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.State.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Hime.CentralDogma.Grammars.LR.State"/> object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.State.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Grammars.LR.State"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:Hime.CentralDogma.Grammars.LR.State"/>.
            </returns>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.State.ID">
            <summary>
            Gets or sets the state's identifier
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.State.Kernel">
            <summary>
            Gets the state's kernel
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.State.Reductions">
            <summary>
            Gets the state's reduction
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.State.Items">
            <summary>
            Gets the items in this state
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.State.Conflicts">
            <summary>
            Gets the conflicts in this state
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.State.Transitions">
            <summary>
            Gets the symbols that triggers transitions from this state
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.StateAction">
            <summary>
            Represents an action in a LR state
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.StateAction.ActionType">
            <summary>
            Gets the type of action
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.StateAction.OnSymbol">
            <summary>
            Gets the trigger for the action
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.StateActionReduce">
            <summary>
            Represents a reduction action in a LR state
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.StateActionReduce.lookahead">
            <summary>
            The lookahead to reduce on
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.StateActionReduce.toReduce">
            <summary>
            The rule to reduce
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.StateActionReduce.#ctor(Hime.CentralDogma.Grammars.Terminal,Hime.CentralDogma.Grammars.Rule)">
            <summary>
            Initializes this action
            </summary>
            <param name="lookahead">The lookahead to reduce on</param>
            <param name="rule">The rule to reduce</param>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.StateActionReduce.ActionType">
            <summary>
             Gets the type of action 
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.StateActionReduce.OnSymbol">
            <summary>
             Gets the trigger for the action 
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.StateActionReduce.Lookahead">
            <summary>
            Gets the lookahead for this action
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.StateActionReduce.ToReduceRule">
            <summary>
            Gets the rule to reduce
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.StateActionShift">
            <summary>
            Represents a shift action in a LR state
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.StateActionShift.symbol">
            <summary>
            The trigger symbol
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.StateActionShift.target">
            <summary>
            The target of the shift action
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.StateActionShift.#ctor(Hime.CentralDogma.Grammars.Symbol,Hime.CentralDogma.Grammars.LR.State)">
            <summary>
            Initializes this action
            </summary>
            <param name="trigger">The action's trigger</param>
            <param name="target">The shift target</param>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.StateActionShift.ActionType">
            <summary>
             Gets the type of action 
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.StateActionShift.OnSymbol">
            <summary>
             Gets the trigger for the action 
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.StateActionShift.Target">
            <summary>
            Gets the target of this action
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.StateKernel">
            <summary>
            Represents the kernel of a LR state
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.StateKernel.dictItems">
            <summary>
            The items in this kernel, organized in in a map
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.StateKernel.items">
            <summary>
            The items in this kernel
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.StateKernel.#ctor">
            <summary>
            Initializes this kernel
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.StateKernel.AddItem(Hime.CentralDogma.Grammars.LR.Item)">
            <summary>
            Adds the item to this kernel
            </summary>
            <param name="item">A LR item</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.StateKernel.ContainsItem(Hime.CentralDogma.Grammars.LR.Item)">
            <summary>
            Determines whether the given item is in this kernel
            </summary>
            <param name="item">A LR item</param>
            <returns><c>true</c> if the item is in this kernel</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.StateKernel.GetClosure">
            <summary>
            Gets the closure of this kernel
            </summary>
            <returns>The closure</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.StateKernel.Equals(Hime.CentralDogma.Grammars.LR.StateKernel)">
            <summary>
            Determines whether the specified <see cref="T:Hime.CentralDogma.Grammars.LR.StateKernel"/> is equal to
            the current <see cref="T:Hime.CentralDogma.Grammars.LR.StateKernel"/>.
            </summary>
            <param name="kernel">
            The <see cref="T:Hime.CentralDogma.Grammars.LR.StateKernel"/> to compare with the current <see cref="T:Hime.CentralDogma.Grammars.LR.StateKernel"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:Hime.CentralDogma.Grammars.LR.StateKernel"/> is equal to the
            current <see cref="T:Hime.CentralDogma.Grammars.LR.StateKernel"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.StateKernel.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Hime.CentralDogma.Grammars.LR.StateKernel"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:Hime.CentralDogma.Grammars.LR.StateKernel"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:Hime.CentralDogma.Grammars.LR.StateKernel"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.StateKernel.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Hime.CentralDogma.Grammars.LR.StateKernel"/> object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.StateKernel.Size">
            <summary>
            Gets the kernel's size
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.StateKernel.Items">
            <summary>
            Gets the items in this kernel
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.StateReductions">
            <summary>
            Represents a set of reduction in a LR state
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.StateReductions.content">
            <summary>
            The reductions in this set
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.StateReductions.conflicts">
            <summary>
            The conflicts raised by this set
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.StateReductions.#ctor">
            <summary>
            Initializes this set of reductions as empty
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.StateReductions.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.StateReductions.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.StateReductions.Add(Hime.CentralDogma.Grammars.LR.StateActionReduce)">
            <summary>
            Adds a reduction to this set
            </summary>
            <param name="action">The reduction to add</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.StateReductions.Build(Hime.CentralDogma.Grammars.LR.State)">
            <summary>
            Build this set from the given LR state
            </summary>
            <param name="state">A LR state</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.StateReductions.RaiseConflictShiftReduce(Hime.CentralDogma.Grammars.LR.State,Hime.CentralDogma.Grammars.LR.Item,Hime.CentralDogma.Grammars.Terminal)">
            <summary>
            Raises a shift/reduce conflict
            </summary>
            <param name="state">The parent state</param>
            <param name="item">The conflictuous reduction item</param>
            <param name="lookahead">The lookahead creating the conflict</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.StateReductions.RaiseConflictReduceReduce(Hime.CentralDogma.Grammars.LR.State,Hime.CentralDogma.Grammars.LR.Item,Hime.CentralDogma.Grammars.LR.Item,Hime.CentralDogma.Grammars.Terminal)">
            <summary>
            Raises a reduce/reduce conflict
            </summary>
            <param name="state">The parent state</param>
            <param name="currentItem">The conflictuous reduction item (current)</param>
            <param name="previousItem">The conflictuous reduction item (previous)</param>
            <param name="lookahead">The lookahead creating the conflict</param>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.StateReductions.Count">
            <summary>
            Gets the number of reductions in this set
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.StateReductions.Item(System.Int32)">
            <summary>
            Gets the reductions a the specifie index
            </summary>
            <param name='index'>An index</param>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.StateReductions.Conflicts">
            <summary>
            Gets the conflicts raised by this set
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.StateReductions.ExpectedTerminals">
            <summary>
            Gets the set of the expected terminals in this set of reductions
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.GLRGeneration">
            <summary>
            Represents a generation in the simulation of a GLR parser
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.GLRGeneration.nodes">
            <summary>
            The stack nodes in this generation
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.GLRGeneration.#ctor">
            <summary>
            Initializes this generation as empty
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.GLRGeneration.#ctor(Hime.CentralDogma.Grammars.LR.GLRGeneration)">
            <summary>
            Initializes this generation as a copy of the given one
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.GLRGeneration.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.GLRGeneration.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.GLRGeneration.Resolve(Hime.CentralDogma.Grammars.LR.State)">
            <summary>
            Resolves a stack node in this generation for the given LR state
            </summary>
            <param name="state">A LR state</param>
            <returns>A stack node for the given LR state</returns>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.GLRGeneration.Nodes">
            <summary>
            Gets the stack nodes in this generation
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.Builder">
            <summary>
            Represents a builder of LR graphs
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.Builder.grammar">
            <summary>
            The grammar to build
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.Builder.graph">
            <summary>
            The graph to build
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.Builder.conflicts">
            <summary>
            The found conflicts
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.Builder.simulator">
            <summary>
            A GLR simulator
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Builder.#ctor(Hime.CentralDogma.Grammars.Grammar)">
            <summary>
            Initializes this builder
            </summary>
            <param name="grammar">The grammar to build</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Builder.Build(Hime.CentralDogma.ParsingMethod)">
            <summary>
            Build the specified grammar
            </summary>
            <param name="method">The parsing method to use</param>
            <returns>The resulting LR graph, or <c>null</c> if it could not be generated</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Builder.GetGraphLR0">
            <summary>
            Gets the LR(0) graph
            </summary>
            <returns>The corresponding LR(0) graph</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Builder.GetGraphLR1">
            <summary>
            Gets the LR(1) graph
            </summary>
            <returns>The corresponding LR(1) graph</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Builder.GetGaphLALR1">
            <summary>
            Gets the LALR(1) graph
            </summary>
            <returns>The corresponding LALR(1) graph</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Builder.GetGraphRNGLR1">
            <summary>
            Gets the RNGLR(1) graph
            </summary>
            <returns>The corresponding RNGLR(1) graph</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Builder.GetGraphRNGLALR1">
            <summary>
            Gets the RNGLALR(1) graph
            </summary>
            <returns>The corresponding RNGLALR(1) graph</returns>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.Builder.Conflicts">
            <summary>
            Gets the conflicts produced by this builder
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.KernelGraph">
            <summary>
            Represents a graph of LR kernels used to build a LALR(1) graph from a LR(0) graph
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.KernelGraph.graphLR0">
            <summary>
            The LR(0) graph
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.KernelGraph.graphLALR1">
            <summary>
            The result LALR(1) graph
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.KernelGraph.kernels">
            <summary>
            The produced kernels
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.KernelGraph.propagOrigins">
            <summary>
            The origins of propagations
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.KernelGraph.propagTargets">
            <summary>
            The targets of propagations
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.KernelGraph.#ctor(Hime.CentralDogma.Grammars.LR.Graph)">
            <summary>
            Initializes this graph of kernels
            </summary>
            <param name="graphLR0">The original LR(0) graph</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.KernelGraph.BuildKernels">
            <summary>
            Builds the kernels
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.KernelGraph.BuildPropagationTable">
            <summary>
            Builds the propagation table
            </summary>
            <remarks>
            The propagation table is a couple of list where
            items in the first list propagate to items in the second list at the same index
            </remarks>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.KernelGraph.GetEquivalentInSet(Hime.CentralDogma.Grammars.LR.StateKernel,Hime.CentralDogma.Grammars.LR.Item)">
            <summary>
            Gets the item equivalent to the specified one in the kernel
            </summary>
            <param name="kernel">A kernel</param>
            <param name="equivalent">An item</param>
            <returns>The equivalent item</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.KernelGraph.BuildPropagate">
            <summary>
            Execute the propagations
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.KernelGraph.BuildGraphLALR1">
            <summary>
            Builds the LALR(1) graph
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.KernelGraph.GetGraphLALR1">
            <summary>
            Gets the produced LALR(1) graph
            </summary>
            <returns>A LALR(1) graph</returns>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.ItemLALR1">
            <summary>
            Represents a LALR(1) item
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.ItemLALR1.lookaheads">
            <summary>
            The lookaheads for this item
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.ItemLALR1.#ctor(Hime.CentralDogma.Grammars.Rule,System.Int32,Hime.CentralDogma.Grammars.TerminalSet)">
            <summary>
            Initializes this item
            </summary>
            <param name="rule">The underlying rule</param>
            <param name="position">The dot position in the rule</param>
            <param name="lookaheads">The lookaheads for this item</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.ItemLALR1.#ctor(Hime.CentralDogma.Grammars.LR.Item)">
            <summary>
            Initializes this item
            </summary>
            <param name="copied">The item to copy</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.ItemLALR1.GetChild">
            <summary>
             Gets the child of this item
            </summary>
            <returns>The child of this item</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.ItemLALR1.CloseTo(System.Collections.Generic.List{Hime.CentralDogma.Grammars.LR.Item},System.Collections.Generic.Dictionary{Hime.CentralDogma.Grammars.Rule,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{Hime.CentralDogma.Grammars.LR.Item}}})">
            <summary>
            Closes this item to a set of items
            </summary>
            <param name="closure">The list to close</param>
            <param name="map">The current helper map</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.ItemLALR1.ItemEquals(Hime.CentralDogma.Grammars.LR.Item)">
            <summary>
            Determines whether the specified <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/> is equal to the current <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/>.
            </summary>
            <param name="item">
            The <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/> to compare with the current <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/> is equal to the current
            <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.ItemLALR1.Lookaheads">
            <summary>
             Gets the lookaheads for this item
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.ItemLR0">
            <summary>
            Represents a LR(0) item
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.ItemLR0.#ctor(Hime.CentralDogma.Grammars.Rule,System.Int32)">
            <summary>
            Initializes this item
            </summary>
            <param name="rule">The underlying rule</param>
            <param name="position">The dot position in the rule</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.ItemLR0.GetChild">
            <summary>
             Gets the child of this item
            </summary>
            <returns>The child of this item</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.ItemLR0.CloseTo(System.Collections.Generic.List{Hime.CentralDogma.Grammars.LR.Item},System.Collections.Generic.Dictionary{Hime.CentralDogma.Grammars.Rule,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{Hime.CentralDogma.Grammars.LR.Item}}})">
            <summary>
            Closes this item to a set of items
            </summary>
            <param name="closure">The list to close</param>
            <param name="map">The current helper map</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.ItemLR0.ItemEquals(Hime.CentralDogma.Grammars.LR.Item)">
            <summary>
            Determines whether the specified <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/> is equal to the current <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/>.
            </summary>
            <param name="item">
            The <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/> to compare with the current <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/> is equal to the current
            <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.ItemLR0.Lookaheads">
            <summary>
             Gets the lookaheads for this item
            </summary>
            <remarks>This is always the empty set</remarks>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.ItemLR1">
            <summary>
            Represents a LR(1) item
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.ItemLR1.lookahead">
            <summary>
            The lookahead for this item
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.ItemLR1.lookaheads">
            <summary>
            The lookaheads for this item (just the one)
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.ItemLR1.#ctor(Hime.CentralDogma.Grammars.Rule,System.Int32,Hime.CentralDogma.Grammars.Terminal)">
            <summary>
            Initializes this item
            </summary>
            <param name="rule">The underlying rule</param>
            <param name="position">The dot position in the rule</param>
            <param name="lookahead">The lookahead for this item</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.ItemLR1.GetChild">
            <summary>
             Gets the child of this item
            </summary>
            <returns>The child of this item</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.ItemLR1.CloseTo(System.Collections.Generic.List{Hime.CentralDogma.Grammars.LR.Item},System.Collections.Generic.Dictionary{Hime.CentralDogma.Grammars.Rule,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{Hime.CentralDogma.Grammars.LR.Item}}})">
            <summary>
            Closes this item to a set of items
            </summary>
            <param name="closure">The list to close</param>
            <param name="map">The current helper map</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.ItemLR1.ItemEquals(Hime.CentralDogma.Grammars.LR.Item)">
            <summary>
            Determines whether the specified <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/> is equal to the current <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/>.
            </summary>
            <param name="item">
            The <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/> to compare with the current <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/> is equal to the current
            <see cref="T:Hime.CentralDogma.Grammars.LR.Item"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.ItemLR1.Lookahead">
            <summary>
             Gets the lookahead for this item
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.ItemLR1.Lookaheads">
            <summary>
             Gets the lookaheads for this item
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.StateReductionsLALR1">
            <summary>
            Represents a set of reduction for a LALR(1) state
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.StateReductionsLALR1.#ctor">
            <summary>
            Initializes this set of reductions as empty
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.StateReductionsLALR1.Build(Hime.CentralDogma.Grammars.LR.State)">
            <summary>
            Build this set from the given LR state
            </summary>
            <param name="state">A LR state</param>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.StateReductionsLALR1.ExpectedTerminals">
            <summary>
            Gets the set of the expected terminals in this set of reductions
            </summary>
            <remarks>This is always an empty set</remarks>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.StateReductionsLR0">
            <summary>
            Represents a set of reduction for a LR(0) state
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.StateReductionsLR0.#ctor">
            <summary>
            Initializes this set of reductions as empty
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.StateReductionsLR0.Build(Hime.CentralDogma.Grammars.LR.State)">
            <summary>
            Build this set from the given LR state
            </summary>
            <param name="state">A LR state</param>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.StateReductionsLR0.ExpectedTerminals">
            <summary>
            Gets the set of the expected terminals in this set of reductions
            </summary>
            <remarks>This is always an empty set</remarks>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.StateReductionsLR1">
            <summary>
            Represents a set of reduction for a LR(1) state
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.StateReductionsLR1.#ctor">
            <summary>
            Initializes this set of reductions as empty
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.StateReductionsLR1.Build(Hime.CentralDogma.Grammars.LR.State)">
            <summary>
            Build this set from the given LR state
            </summary>
            <param name="state">A LR state</param>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.StateReductionsLR1.ExpectedTerminals">
            <summary>
            Gets the set of the expected terminals in this set of reductions
            </summary>
            <remarks>This is always an empty set</remarks>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.StateActionRNReduce">
            <summary>
            Represents a reduction action in a RNGLR state
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.StateActionRNReduce.#ctor(Hime.CentralDogma.Grammars.Terminal,Hime.CentralDogma.Grammars.Rule,System.Int32)">
            <summary>
            Initializes this action
            </summary>
            <param name="lookahead">The lookahead to reduce on</param>
            <param name="rule">The rule to reduce</param>
            <param name="length">The length of the reduction</param>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.StateActionRNReduce.ReduceLength">
            <summary>
            Gets the reduction length
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.StateReductionsRNGLALR1">
            <summary>
            Represents a set of reduction for a RNGLALR(1) state
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.StateReductionsRNGLALR1.#ctor">
            <summary>
            Initializes this set of reductions as empty
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.StateReductionsRNGLALR1.Build(Hime.CentralDogma.Grammars.LR.State)">
            <summary>
            Build this set from the given LR state
            </summary>
            <param name="state">A LR state</param>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.StateReductionsRNGLALR1.ExpectedTerminals">
            <summary>
            Gets the set of the expected terminals in this set of reductions
            </summary>
            <remarks>This is always an empty set</remarks>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.StateReductionsRNGLR1">
            <summary>
            Represents a set of reduction for a RNGLR(1) state
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.StateReductionsRNGLR1.#ctor">
            <summary>
            Initializes this set of reductions as empty
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.StateReductionsRNGLR1.Build(Hime.CentralDogma.Grammars.LR.State)">
            <summary>
            Build this set from the given LR state
            </summary>
            <param name="state">A LR state</param>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.StateReductionsRNGLR1.ExpectedTerminals">
            <summary>
            Gets the set of the expected terminals in this set of reductions
            </summary>
            <remarks>This is always an empty set</remarks>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.DeciderState">
            <summary>
            Represents a state in a decider automaton for the LR(*) parsing method
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.DeciderState.id">
            <summary>
            The state's identifier
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.DeciderState.decider">
            <summary>
            The parent decider
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.DeciderState.decision">
            <summary>
            The decision, as an index selecting the correct item in a LR state
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.DeciderState.choices">
            <summary>
            The choices mapping indices of items in a LR state to a GLR generation
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.DeciderState.transitions">
            <summary>
            The outgoing transitions in this state
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.DeciderState.incomings">
            <summary>
            The incomings transitions in this state
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.DeciderState.#ctor(Hime.CentralDogma.Grammars.LR.Decider)">
            <summary>
            Initializes this state with the parent decider
            </summary>
            <param name="decider">The parent decider</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.DeciderState.#ctor(Hime.CentralDogma.Grammars.LR.Decider,System.Collections.Generic.Dictionary{System.Int32,Hime.CentralDogma.Grammars.LR.GLRGeneration})">
            <summary>
            Initializes this state with the parent decider
            </summary>
            <param name="decider">The parent decider</param>
            <param name="data">The choices for this state</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.DeciderState.#ctor(Hime.CentralDogma.Grammars.LR.Decider,System.Int32)">
            <summary>
            Initializes this state with the parent decider
            </summary>
            <param name="decider">The parent decider</param>
            <param name="decision">The decision made at this state</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.DeciderState.ComputeNexts(Hime.CentralDogma.Grammars.LR.GLRSimulator)">
            <summary>
            Computes the next states based on the specified simulator
            </summary>
            <param name="simulator">A GLR simulator</param>
            <returns>The possible children of this state according to the simulator</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.DeciderState.AddDecision(System.Int32,Hime.CentralDogma.Grammars.Terminal)">
            <summary>
            Adds a decision at this state
            </summary>
            <param name="item">The item being decided on</param>
            <param name="t">The lookahead for this decition</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.DeciderState.AddTransition(Hime.CentralDogma.Grammars.Terminal,Hime.CentralDogma.Grammars.LR.DeciderState)">
            <summary>
            Adds a transition from this state
            </summary>
            <param name="t">The transition's label</param>
            <param name="next">The next state by the transition</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.DeciderState.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:Hime.CentralDogma.Grammars.LR.DeciderState"/> object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.DeciderState.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Hime.CentralDogma.Grammars.LR.DeciderState"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:Hime.CentralDogma.Grammars.LR.DeciderState"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current
            <see cref="T:Hime.CentralDogma.Grammars.LR.DeciderState"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.DeciderState.ID">
            <summary>
            Gets or sets the identifier of this state
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.DeciderState.Decision">
            <summary>
            Gets the decision, or -1 if none
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.DeciderState.Transitions">
            <summary>
            Gets the outgoing transitions
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.DeciderState.Incomings">
            <summary>
            Gets the incomings transitions
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.LR.Decider">
            <summary>
            Represents a decider for solving conflicts in a LR(*) parsing method
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.Decider.lrstate">
            <summary>
            The LR state that has a conflict
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.Decider.items">
            <summary>
            The conflictuous items
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.Decider.states">
            <summary>
            The states of this decider
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.Decider.origins">
            <summary>
            The entry state in the decider depending on the conflict that we need to solve
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.LR.Decider.isResolved">
            <summary>
            Whether each conflict is resolved
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Decider.IsResolved(Hime.CentralDogma.Grammars.LR.Conflict)">
            <summary>
            Determines whether the given conflict is solved by this decider
            </summary>
            <param name="conflict">A conflict in the original LR state</param>
            <returns><c>true</c> if the specified conflict is solved; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Decider.#ctor(Hime.CentralDogma.Grammars.LR.State)">
            <summary>
            Initializes a decider for the specified LR state
            </summary>
            <param name="state">A LR state</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Decider.GetItem(System.Int32)">
            <summary>
            Gets the item indicated by the given decision
            </summary>
            <param name="decision">A decision</param>
            <returns>The item indicated by the decision</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.LR.Decider.Build(Hime.CentralDogma.Grammars.LR.GLRSimulator)">
            <summary>
            Build this decider with the specified simulator
            </summary>
            <param name="simulator">A GLR simulator</param>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.Decider.LRState">
            <summary>
            Gets the LR state for this decider
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.Decider.States">
            <summary>
            Gets the decider states
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.LR.Decider.Conflicts">
            <summary>
            Gets the conflicts attempted to be solved by this decider
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Input.Loader">
            <summary>
            Represents a loader of inputs that produces grammars
            </summary>
            <remarks>
            This class will close all the streams it is passed after loading the data from them.
            </remarks>
        </member>
        <member name="F:Hime.CentralDogma.Input.Loader.nextRawID">
            <summary>
            Next unique identifier for raw (anonymous) inputs
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.Loader.inputs">
            <summary>
            Repositories of inputs
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.Loader.preReadInputs">
            <summary>
            Repositories of pre-parsed inputs
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.Loader.inners">
            <summary>
            Repositories of inner loaders
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.Loader.reporter">
            <summary>
            The reporter
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Input.Loader.#ctor">
            <summary>
            Initializes this loader
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Input.Loader.#ctor(Hime.CentralDogma.Reporter)">
            <summary>
            Initializes this loader
            </summary>
            <param name="reporter">The reporter to use</param>
        </member>
        <member name="M:Hime.CentralDogma.Input.Loader.GetRawInputID">
            <summary>
            Gets a unique identifier for a raw (anonymous) input
            </summary>
            <returns>A unique identifier</returns>
        </member>
        <member name="M:Hime.CentralDogma.Input.Loader.AddInputFile(System.String)">
            <summary>
            Adds a new file as input
            </summary>
            <param name="file">The input file</param>
        </member>
        <member name="M:Hime.CentralDogma.Input.Loader.AddInputRaw(System.String)">
            <summary>
            Adds a new data string as input
            </summary>
            <param name="data">The data string</param>
        </member>
        <member name="M:Hime.CentralDogma.Input.Loader.AddInputRaw(System.String,System.String)">
            <summary>
            Adds a new named data string as input
            </summary>
            <param name="name">The input's name</param>
            <param name="data">The data string</param>
        </member>
        <member name="M:Hime.CentralDogma.Input.Loader.AddInputRaw(System.IO.Stream)">
            <summary>
            Adds a new data stream as input
            </summary>
            <param name="stream">The input stream</param>
        </member>
        <member name="M:Hime.CentralDogma.Input.Loader.AddInputRaw(System.String,System.IO.Stream)">
            <summary>
            Adds a new named data stream as input
            </summary>
            <param name="name">The input's name</param>
            <param name="stream">The input stream</param>
        </member>
        <member name="M:Hime.CentralDogma.Input.Loader.AddInputRaw(System.IO.TextReader)">
            <summary>
            Adds a new data reader as input
            </summary>
            <param name="reader">The input reader</param>
        </member>
        <member name="M:Hime.CentralDogma.Input.Loader.AddInputRaw(System.String,System.IO.TextReader)">
            <summary>
            Adds a new named data reader as input
            </summary>
            <param name="name">The input's name</param>
            <param name="reader">The input reader</param>
        </member>
        <member name="M:Hime.CentralDogma.Input.Loader.AddInput(Hime.Redist.ASTNode,Hime.Redist.Text)">
            <summary>
            Adds the specified pre-parsed grammar to the inputs
            </summary>
            <param name="node">The parse tree of a grammar</param>
            <param name="input">The input that contains the grammar</param>
        </member>
        <member name="M:Hime.CentralDogma.Input.Loader.Load">
            <summary>
            Parses the inputs
            </summary>
            <returns>The loaded grammars</returns>
        </member>
        <member name="M:Hime.CentralDogma.Input.Loader.LoadInput(Hime.Redist.ASTNode,Hime.Redist.Text)">
            <summary>
            Loads the specified input
            </summary>
            <param name="node">The parse tree of a grammar</param>
            <param name="input">The input that contains the grammar</param>
            <returns><c>true</c> if the operation succeed</returns>
        </member>
        <member name="M:Hime.CentralDogma.Input.Loader.LoadInput(System.String,System.IO.TextReader)">
            <summary>
            Parses the input with the given identifier
            </summary>
            <param name="name">The input's name</param>
            <param name="reader">The input's reader</param>
            <returns><c>true</c> if the operation succeed</returns>
        </member>
        <member name="M:Hime.CentralDogma.Input.Loader.SolveDependencies">
            <summary>
            Solves the dependencies between the inputs and interprets the parsed inputs
            </summary>
            <returns><c>true</c> if all dependencies were solved</returns>
        </member>
        <member name="T:Hime.CentralDogma.Grammars.Loader">
            <summary>
            Represents a loader for a grammar
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Loader.resource">
            <summary>
            The name of the resource containing the data that are loaded by this instance
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Loader.input">
            <summary>
            The input from which the grammar is loaded
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Loader.root">
            <summary>
            The root to load from
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Loader.reporter">
            <summary>
            The log
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Loader.inherited">
            <summary>
            Lists of the inherited grammars
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Loader.grammar">
            <summary>
            The resulting grammar
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Grammars.Loader.caseInsensitive">
            <summary>
            Flag for the global casing of the grammar
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.#ctor(System.String,Hime.Redist.Text,Hime.Redist.ASTNode,Hime.CentralDogma.Reporter)">
            <summary>
            Initializes this load
            </summary>
            <param name="resName">The name of the resource</param>
            <param name="input">The input from which the grammar is loaded</param>
            <param name="root">The root AST</param>
            <param name="reporter">The log</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.Load(System.Collections.Generic.Dictionary{System.String,Hime.CentralDogma.Grammars.Loader})">
            <summary>
            Loads the specified data
            </summary>
            <param name="siblings">The siblings of this loader</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.OnErrorNoContext(System.String,System.Object[])">
            <summary>
            Raises an error in this loader
            </summary>
            <param name="message">The error's message</param>
            <param name="args">The message's arguments</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.OnError(Hime.Redist.TextPosition,System.String,System.Object[])">
            <summary>
            Raises an error in this loader
            </summary>
            <param name="position">The error's position in the input</param>
            <param name="message">The error's message</param>
            <param name="args">The message's arguments</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.ResolveSymbol(System.String,Hime.CentralDogma.Grammars.Context)">
            <summary>
            Gets the symbol corresponding to the given name, depending on the context
            </summary>
            <param name="name">A name</param>
            <param name="context">The current context</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.AddUnicodeSpanToNFA(Hime.CentralDogma.Automata.NFA,Hime.CentralDogma.UnicodeSpan)">
            <summary>
            Adds a unicode character span to an existing NFA automaton
            </summary>
            <param name="automata">The target NFA</param>
            <param name="span">The unicode span to add</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.LoadGrammarContent(Hime.Redist.ASTNode)">
            <summary>
            Loads the content of the grammar in the given AST
            </summary>
            <param name="node">The AST node representing a grammar</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.LoadBlockOptions(Hime.Redist.ASTNode)">
            <summary>
            Loads the options block of a grammar
            </summary>
            <param name="node">The options block's AST node</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.LoadOption(Hime.Redist.ASTNode)">
            <summary>
            Loads the grammar option in the given AST
            </summary>
            <param name="node">The AST node of a grammar option</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.LoadBlockTerminals(Hime.Redist.ASTNode)">
            <summary>
            Loads the terminal blocks of a grammar
            </summary>
            <param name="node">The terminal block's AST node</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.LoadTerminal(Hime.Redist.ASTNode)">
            <summary>
            Loads the terminal in the given AST
            </summary>
            <param name="node">The AST node of a terminal rule</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.BuildNFA(Hime.Redist.ASTNode)">
            <summary>
            Builds the NFA represented by the AST node
            </summary>
            <param name="node">An AST node representing a NFA</param>
            <returns>The equivalent NFA</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.BuildEpsilonNFA">
            <summary>
            Builds a NFA that does nothing
            </summary>
            <returns>A NFA</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.BuildNFAFromText(Hime.Redist.ASTNode)">
            <summary>
            Builds a NFA from a piece of text
            </summary>
            <param name="node">An AST node representing a NFA</param>
            <returns>The equivalent NFA</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.BuildNFAFromCodepoint(Hime.Redist.ASTNode)">
            <summary>
            Builds a NFA from a unicode code point
            </summary>
            <param name="node">An AST node representing a NFA</param>
            <returns>The equivalent NFA</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.BuildNFAFromClass(Hime.Redist.ASTNode)">
            <summary>
            Builds a NFA from a character class
            </summary>
            <param name="node">An AST node representing a NFA</param>
            <returns>The equivalent NFA</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.BuildNFAFromUnicodeCategory(Hime.Redist.ASTNode)">
            <summary>
            Builds a NFA from a unicode category
            </summary>
            <param name="node">An AST node representing a NFA</param>
            <returns>The equivalent NFA</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.BuildNFAFromUnicodeBlock(Hime.Redist.ASTNode)">
            <summary>
            Builds a NFA from a unicode block
            </summary>
            <param name="node">An AST node representing a NFA</param>
            <returns>The equivalent NFA</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.BuildNFAFromUnicodeSpan(Hime.Redist.ASTNode)">
            <summary>
            Builds a NFA from a unicode character span
            </summary>
            <param name="node">An AST node representing a NFA</param>
            <returns>The equivalent NFA</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.BuildNFAFromAny(Hime.Redist.ASTNode)">
            <summary>
            Builds a NFA that matches everything (a single character)
            </summary>
            <param name="node">An AST node representing a NFA</param>
            <returns>The equivalent NFA</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.BuildNFAFromReference(Hime.Redist.ASTNode)">
            <summary>
            Builds a NFA from a referenced terminal
            </summary>
            <param name="node">An AST node representing a NFA</param>
            <returns>The equivalent NFA</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.LoadBlockRules(Hime.Redist.ASTNode)">
            <summary>
            Loads the rules block of a grammar
            </summary>
            <param name="node">The AST node of a rules block</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.LoadRule(Hime.CentralDogma.Grammars.Context,Hime.Redist.ASTNode)">
            <summary>
            Loads the syntactic rule in the given AST
            </summary>
            <param name="context">The current context</param>
            <param name="node">The AST node of a syntactic rule</param>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.BuildDefinitions(Hime.CentralDogma.Grammars.Context,Hime.Redist.ASTNode)">
            <summary>
            Builds the set of rule definitions that are represented by the given AST
            </summary>
            <param name="context">The current context</param>
            <param name="node">The AST node of a syntactic rule</param>
            <returns>The set of possible rule definitions</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.BuildAtomicDefinition(Hime.CentralDogma.Grammars.Context,Hime.Redist.ASTNode)">
            <summary>
            Builds the set of rule definitions that are represented by the given AST
            </summary>
            <param name="context">The current context</param>
            <param name="node">The AST node of a syntactic rule</param>
            <returns>The set of possible rule definitions</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.BuildAtomicAction(Hime.Redist.ASTNode)">
            <summary>
            Builds the set of rule definitions that represents a single semantic action
            </summary>
            <param name="node">The AST node of a syntactic rule</param>
            <returns>The set of possible rule definitions</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.BuildAtomicVirtual(Hime.Redist.ASTNode)">
            <summary>
            Builds the set of rule definitions that represents a single virtual symbol
            </summary>
            <param name="node">The AST node of a syntactic rule</param>
            <returns>The set of possible rule definitions</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.BuildAtomicSimpleReference(Hime.CentralDogma.Grammars.Context,Hime.Redist.ASTNode)">
            <summary>
            Builds the set of rule definitions that represents a single reference to a simple variable
            </summary>
            <param name="context">The current context</param>
            <param name="node">The AST node of a syntactic rule</param>
            <returns>The set of possible rule definitions</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.BuildAtomicTemplateReference(Hime.CentralDogma.Grammars.Context,Hime.Redist.ASTNode)">
            <summary>
            Builds the set of rule definitions that represents a single reference to a template variable
            </summary>
            <param name="context">The current context</param>
            <param name="node">The AST node of a syntactic rule</param>
            <returns>The set of possible rule definitions</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.BuildAtomicInlineText(Hime.Redist.ASTNode)">
            <summary>
            Builds the set of rule definitions that represents a single inline piece of text
            </summary>
            <param name="node">The AST node of a syntactic rule</param>
            <returns>The set of possible rule definitions</returns>
        </member>
        <member name="M:Hime.CentralDogma.Grammars.Loader.ReplaceEscapees(System.String)">
            <summary>
            Replaces the escape sequences in the given piece of text by their value
            </summary>
            <param name="value">A string</param>
            <returns>The string with the escape sequences replaced by their value</returns>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Loader.Grammar">
            <summary>
            Gets the result of this loader
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Loader.IsSolved">
            <summary>
            Gets a value indicating whether all dependencies are solved
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Grammars.Loader.Dependencies">
            <summary>
            Gets the remaining unsolved dependencies
            </summary>
            <value>The remaining unsolved dependencies</value>
        </member>
        <member name="T:Hime.CentralDogma.Output.Mode">
            <summary>
            Represents a grammar's compilation mode
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.Mode.Source">
            <summary>
            Generates the source code for the lexer and parser
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.Mode.Assembly">
            <summary>
            Generates the compiled assembly of the lexer and parser
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.Mode.SourceAndAssembly">
            <summary>
            Generates the source code for the lexer and parser and the compiled assembly
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.Mode.Debug">
            <summary>
            Generates the source code for the lexer and parser, as well as the debug data
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Output.Modifier">
            <summary>
            Represents the access modifiers for the generated code
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.Modifier.Public">
            <summary>
            Generated classes are public
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.Modifier.Internal">
            <summary>
            Generated classes are internal
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.ROList`1">
            <summary>
            Represents a lightweight interface for a readonly list of T elements
            </summary>
            <typeparam name="T">The type of elements in this list</typeparam>
        </member>
        <member name="F:Hime.CentralDogma.ROList`1.inner">
            <summary>
            The inner data set
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.ROList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes this list
            </summary>
            <param name="original">The original items</param>
        </member>
        <member name="M:Hime.CentralDogma.ROList`1.Contains(`0)">
            <summary>
            Determines whether this list contains the specified item
            </summary>
            <param name="item">The item to look for</param>
            <returns><c>true</c> if the item is in this list</returns>
        </member>
        <member name="M:Hime.CentralDogma.ROList`1.IndexOf(`0)">
            <summary>
            Determines the index of the specified item in this list
            </summary>
            <param name="item">The item to look for</param>
            <returns>The index of the specified item, or -1</returns>
        </member>
        <member name="M:Hime.CentralDogma.ROList`1.GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Hime.CentralDogma.ROList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:Hime.CentralDogma.ROList`1.Count">
            <summary>
            Gets the number of elements in this list
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.ROList`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index
            </summary>
            <param name="index">An index in this list</param>
        </member>
        <member name="T:Hime.CentralDogma.Output.Helper">
            <summary>
            Helpers for the emitters
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Output.Helper.SanitizeNameCS(Hime.CentralDogma.Grammars.Symbol)">
            <summary>
            Sanitizes the name of a symbol for output in C# code
            </summary>
            <param name="symbol">A symbol</param>
            <returns>The sanitized name of the symbol</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.Helper.SanitizeNameJava(Hime.CentralDogma.Grammars.Symbol)">
            <summary>
            Sanitizes the name of a symbol for output in Java code
            </summary>
            <param name="symbol">A symbol</param>
            <returns>The sanitized name of the symbol</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.Helper.RemoveSpecials(System.String)">
            <summary>
            Removes the specials characters that can arise a the specified symbol name
            </summary>
            <param name="name">A symbol name</param>
            <returns>The cleaned-up name</returns>
        </member>
        <member name="F:Hime.CentralDogma.Output.Helper.keywordsCS">
            <summary>
            The reserved C# keywords
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.Helper.keywordsJava">
            <summary>
            The reserved Java keywords
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.SDK.Serializers">
            <summary>
            Common serializers for debugging purposes
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.SDK.Serializers.Export(Hime.CentralDogma.Grammars.Grammar,System.String)">
            <summary>
            Export the content of the given grammar to the specified file
            </summary>
            <param name="grammar">The grammar to export</param>
            <param name="file">File to export to</param>
        </member>
        <member name="M:Hime.CentralDogma.SDK.Serializers.CompareTerminal(Hime.CentralDogma.Grammars.Terminal,Hime.CentralDogma.Grammars.Terminal)">
            <summary>
            Compares two terminals by name
            </summary>
            <param name="t1">Terminal one</param>
            <param name="t2">Terminal two</param>
            <returns>The ordinal comparison</returns>
        </member>
        <member name="M:Hime.CentralDogma.SDK.Serializers.CompareVariable(Hime.CentralDogma.Grammars.Variable,Hime.CentralDogma.Grammars.Variable)">
            <summary>
            Compares two variables by name
            </summary>
            <param name="t1">Variable one</param>
            <param name="t2">Variable two</param>
            <returns>The ordinal comparison</returns>
        </member>
        <member name="M:Hime.CentralDogma.SDK.Serializers.Export(Hime.CentralDogma.Grammars.LR.Graph,System.String)">
            <summary>
            Export the content of the given LR graph to the specified file
            </summary>
            <param name="graph">The LR graph to export</param>
            <param name="file">File to export to</param>
        </member>
        <member name="M:Hime.CentralDogma.SDK.Serializers.ExportLRState(System.IO.StreamWriter,Hime.CentralDogma.Grammars.LR.State)">
            <summary>
            Export the content of the given LR state to the specified writer
            </summary>
            <param name="writer">The writer to export with</param>
            <param name="state">The LR state to export</param>
        </member>
        <member name="M:Hime.CentralDogma.SDK.Serializers.ExportLRConflict(System.IO.StreamWriter,Hime.CentralDogma.Grammars.LR.Conflict)">
            <summary>
            Export the content of the given LR conflict to the specified writer
            </summary>
            <param name="writer">The writer to export with</param>
            <param name="conflict">The LR conflict to export</param>
        </member>
        <member name="M:Hime.CentralDogma.SDK.Serializers.Export(Hime.Redist.ASTNode,System.String)">
            <summary>
            Exports the given AST tree
            </summary>
            <param name="root">Root of the tree to export</param>
            <param name="file">File to export to</param>
        </member>
        <member name="M:Hime.CentralDogma.SDK.Serializers.ExportNode(System.IO.StreamWriter,System.String,Hime.Redist.ASTNode)">
            <summary>
            Exports the given AST node with the given serializer
            </summary>
            <param name="writer">The writer to export with</param>
            <param name="tab">The current indentation</param>
            <param name="node">The node to serialize</param>
        </member>
        <member name="M:Hime.CentralDogma.SDK.Serializers.ExportDOT(Hime.Redist.ASTNode,System.String)">
            <summary>
            Exports the given AST tree to a DOT graph in the specified file
            </summary>
            <param name="root">Root of the tree to export</param>
            <param name="file">DOT file to export to</param>
        </member>
        <member name="M:Hime.CentralDogma.SDK.Serializers.ExportNode(Hime.CentralDogma.SDK.DOTSerializer,System.String,System.Int32,Hime.Redist.ASTNode)">
            <summary>
            Exports the given AST node with the given serializer
            </summary>
            <param name="serializer">The DOT serializer</param>
            <param name="parent">The parent node ID</param>
            <param name="nextID">The next available ID for the generated DOT data</param>
            <param name="node">The node to serialize</param>
            <returns>The next available ID for the generate DOT data</returns>
        </member>
        <member name="M:Hime.CentralDogma.SDK.Serializers.ExportDOT(Hime.CentralDogma.Automata.DFA,System.String)">
            <summary>
            Exports the given DFA to a DOT graph in the specified file
            </summary>
            <param name="dfa">The DFA to export</param>
            <param name="file">DOT file to export to</param>
        </member>
        <member name="M:Hime.CentralDogma.SDK.Serializers.ExportDOT(Hime.CentralDogma.Automata.NFA,System.String)">
            <summary>
            Exports the given NFA to a DOT graph in the specified file
            </summary>
            <param name="nfa">The NFA to export</param>
            <param name="file">DOT file to export to</param>
        </member>
        <member name="M:Hime.CentralDogma.SDK.Serializers.ExportDOT(Hime.CentralDogma.Automata.LRAutomaton,System.String)">
            <summary>
            Exports the given LR automaton to a DOT graph in the specified file
            </summary>
            <param name="automaton">The LR automaton to export</param>
            <param name="file">DOT file to export to</param>
        </member>
        <member name="M:Hime.CentralDogma.SDK.Serializers.ExportDOT(Hime.CentralDogma.Grammars.LR.Graph,System.String)">
            <summary>
            Exports the given LR automaton to a DOT graph in the specified file
            </summary>
            <param name="graph">The LR automaton to export</param>
            <param name="file">DOT file to export to</param>
        </member>
        <member name="T:Hime.CentralDogma.SDK.TracingAction`1">
            <summary>
            Encapsulates a parser semantic action used for tracing purposes
            </summary>
            <typeparam name="T">The payload's type</typeparam>
        </member>
        <member name="F:Hime.CentralDogma.SDK.TracingAction`1.trace">
            <summary>
            The common trace
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.TracingAction`1.payload">
            <summary>
            The payload for this semantic action
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.SDK.TracingAction`1.#ctor(System.Collections.Generic.List{`0},`0)">
            <summary>
            Initializes this action
            </summary>
            <param name="trace">The common trace</param>
            <param name="payload">The payload to be inserted in the trace</param>
        </member>
        <member name="M:Hime.CentralDogma.SDK.TracingAction`1.Callback(Hime.Redist.Symbol,Hime.Redist.SemanticBody)">
            <summary>
            The callback for the semantic action
            </summary>
            <param name="head">The semantic object for the head</param>
            <param name="body">The current body at the time of the action</param>
        </member>
        <member name="T:Hime.CentralDogma.SDK.ActionTracer">
            <summary>
            Represents a tracer of the execution of the semantic actions in a parser
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.ActionTracer.actions">
            <summary>
            The semantic actions
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.SDK.ActionTracer.trace">
            <summary>
            The produced trace as a list of indices in the list of names
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.SDK.ActionTracer.#ctor(System.Type)">
            <summary>
            Initializes this tracer
            </summary>
            <param name="parserType">The parser's type</param>
        </member>
        <member name="P:Hime.CentralDogma.SDK.ActionTracer.Trace">
            <summary>
            Gets the produced trace as a list of semantic actions' names
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.SDK.ActionTracer.Actions">
            <summary>
            Gets the semantic actions
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Output.Runtime">
            <summary>
            Represents the target runtime to compile for
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.Runtime.Net">
            <summary>
            The .Net platform
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.Runtime.Java">
            <summary>
            The Java platform
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Output.LexerDataGenerator">
            <summary>
            Represents a generator of data and code for a lexer
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Output.Generator">
            <summary>
            Common interface for all generators
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Output.Generator.Generate(System.String)">
            <summary>
            Generates code or data for the specified file
            </summary>
            <param name="file">The target file to generate code or data in</param>
        </member>
        <member name="F:Hime.CentralDogma.Output.LexerDataGenerator.terminals">
            <summary>
            The terminals matched by the lexer
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.LexerDataGenerator.dfa">
            <summary>
            The lexer's DFA
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Output.LexerDataGenerator.#ctor(Hime.CentralDogma.Automata.DFA)">
            <summary>
            Initializes this generator
            </summary>
            <param name="dfa">The dfa to serialize</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.LexerDataGenerator.Generate(System.String)">
            <summary>
            Generates the lexer's binary data
            </summary>
            <param name="file">The file to output to</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.LexerDataGenerator.GenerateDataFor(System.IO.BinaryWriter,Hime.CentralDogma.Automata.DFAState)">
            <summary>
            Generates the given state binary data
            </summary>
            <param name="writer">The output writer</param>
            <param name="state">The state to export</param>
        </member>
        <member name="T:Hime.CentralDogma.Output.LexerJavaCodeGenerator">
            <summary>
            Represents a generator for lexer code for the Java platform
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.LexerJavaCodeGenerator.nmespace">
            <summary>
            The nmespace of the generated code
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.LexerJavaCodeGenerator.modifier">
            <summary>
            The visibility modifier for the generated code
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.LexerJavaCodeGenerator.name">
            <summary>
            The name of the generated lexer
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.LexerJavaCodeGenerator.binResource">
            <summary>
            Path to the automaton's binary resource
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.LexerJavaCodeGenerator.terminals">
            <summary>
            The terminals for the lexer
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.LexerJavaCodeGenerator.separator">
            <summary>
            The separator terminal
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Output.LexerJavaCodeGenerator.#ctor(Hime.CentralDogma.Output.Unit,System.String)">
            <summary>
            Initializes this code generator
            </summary>
            <param name="unit">The unit to generate code for</param>
            <param name="binResource">Path to the automaton's binary resource</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.LexerJavaCodeGenerator.WriteHeader(System.IO.StreamWriter)">
            <summary>
            Writes a generated .Net file header
            </summary>
            <param name="writer">The writer to write to</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.LexerJavaCodeGenerator.Generate(System.String)">
            <summary>
            Generates code for the specified file
            </summary>
            <param name="file">The target file to generate code in</param>
        </member>
        <member name="T:Hime.CentralDogma.Output.LexerNetCodeGenerator">
            <summary>
            Represents a generator for lexer code for the .Net platform
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.LexerNetCodeGenerator.nmespace">
            <summary>
            The nmespace of the generated code
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.LexerNetCodeGenerator.modifier">
            <summary>
            The visibility modifier for the generated code
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.LexerNetCodeGenerator.name">
            <summary>
            The name of the generated lexer
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.LexerNetCodeGenerator.binResource">
            <summary>
            Path to the automaton's binary resource
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.LexerNetCodeGenerator.terminals">
            <summary>
            The terminals for the lexer
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.LexerNetCodeGenerator.separator">
            <summary>
            The separator terminal
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Output.LexerNetCodeGenerator.#ctor(Hime.CentralDogma.Output.Unit,System.String)">
            <summary>
            Initializes this code generator
            </summary>
            <param name="unit">The unit to generate code for</param>
            <param name="binResource">Path to the automaton's binary resource</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.LexerNetCodeGenerator.WriteHeader(System.IO.StreamWriter)">
            <summary>
            Writes a generated .Net file header
            </summary>
            <param name="writer">The writer to write to</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.LexerNetCodeGenerator.Generate(System.String)">
            <summary>
            Generates code for the specified file
            </summary>
            <param name="file">The target file to generate code in</param>
        </member>
        <member name="T:Hime.CentralDogma.Output.ParserLRkDataGenerator">
            <summary>
            Represents a generator for LR(k) parser data for the .Net platform
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.ParserLRkDataGenerator.graph">
            <summary>
            LR graph for the parser
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.ParserLRkDataGenerator.terminals">
            <summary>
            The terminals matched by the associated lexer
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.ParserLRkDataGenerator.variables">
            <summary>
            The variables to be exported
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.ParserLRkDataGenerator.virtuals">
            <summary>
            The virtual symbols to be exported
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.ParserLRkDataGenerator.actions">
            <summary>
            The action symbols to be exported
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.ParserLRkDataGenerator.rules">
            <summary>
            The grammar rules
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Output.ParserLRkDataGenerator.#ctor(Hime.CentralDogma.Output.Unit)">
            <summary>
            Initializes this parser generator
            </summary>
            <param name="unit">The unit to generate a parser for</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.ParserLRkDataGenerator.Generate(System.String)">
            <summary>
            Generates the parser's binary data
            </summary>
            <param name="file">The file to output to</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.ParserLRkDataGenerator.GenerateDataLRTable(System.IO.BinaryWriter,Hime.CentralDogma.Grammars.LR.State)">
            <summary>
            Generates the parser's binary data for the provided LR state
            </summary>
            <param name="writer">The output writer</param>
            <param name="state">The LR state</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.ParserLRkDataGenerator.GenerateDataProduction(System.IO.BinaryWriter,Hime.CentralDogma.Grammars.Rule)">
            <summary>
            Generates the parser's binary representation of a rule production
            </summary>
            <param name="writer">The output writer</param>
            <param name="rule">A grammar rule</param>
        </member>
        <member name="T:Hime.CentralDogma.Output.ParserRNGLRDataGenerator">
            <summary>
            Represents a generator for RNGLR parser data for the .Net platform
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.ParserRNGLRDataGenerator.grammar">
            <summary>
            The grammar to generate a parser for
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.ParserRNGLRDataGenerator.graph">
            <summary>
            LR graph for the parser
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.ParserRNGLRDataGenerator.terminals">
            <summary>
            The terminals matched by the associated lexer
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.ParserRNGLRDataGenerator.variables">
            <summary>
            The variables to be exported
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.ParserRNGLRDataGenerator.virtuals">
            <summary>
            The virtual symbols to be exported
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.ParserRNGLRDataGenerator.actions">
            <summary>
            The action symbols to be exported
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Output.ParserRNGLRDataGenerator.#ctor(Hime.CentralDogma.Output.Unit)">
            <summary>
            Initializes this parser generator
            </summary>
            <param name="unit">The unit to generate a parser for</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.ParserRNGLRDataGenerator.Generate(System.String)">
            <summary>
            Generates the parser's binary data
            </summary>
            <param name="file">The file to output to</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.ParserRNGLRDataGenerator.GenerateDataOffsetTable(System.Collections.Generic.List{System.UInt32},System.Collections.Generic.List{System.UInt16},System.UInt32,Hime.CentralDogma.Grammars.LR.State)">
            <summary>
            Builds the offset table for the RNGLR actions
            </summary>
            <param name="offsets">The offset table</param>
            <param name="counts">The cout table</param>
            <param name="total">The total length at this point</param>
            <param name="state">The state to inspect</param>
            <returns>The total length of the table so far</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.ParserRNGLRDataGenerator.GenerateDataActionTable(System.IO.BinaryWriter,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{Hime.CentralDogma.Grammars.Rule,System.Int32}},Hime.CentralDogma.Grammars.LR.State)">
            <summary>
            Generates the action table
            </summary>
            <param name="writer">The output writer</param>
            <param name="rules">The rules</param>
            <param name="state">The state to inspect</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.ParserRNGLRDataGenerator.GenerateDataProduction(System.IO.BinaryWriter,Hime.CentralDogma.Grammars.Rule,System.Int32)">
            <summary>
            Generates the parser's binary representation of a rule production
            </summary>
            <param name="writer">The output writer</param>
            <param name="rule">A grammar rule</param>
            <param name="length">The reduction's length</param>
        </member>
        <member name="T:Hime.CentralDogma.Output.ParserNetCodeGenerator">
            <summary>
            Represents a generator for parser code for the .Net platform
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.ParserNetCodeGenerator.nmespace">
            <summary>
            The nmespace of the generated code
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.ParserNetCodeGenerator.modifier">
            <summary>
            The visibility modifier for the generated code
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.ParserNetCodeGenerator.name">
            <summary>
            The name of the generated lexer
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.ParserNetCodeGenerator.binResource">
            <summary>
            Path to the automaton's binary resource
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.ParserNetCodeGenerator.grammar">
            <summary>
            The grammar to generate a parser for
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.ParserNetCodeGenerator.parserType">
            <summary>
            The type of the parser to generate
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Output.ParserNetCodeGenerator.#ctor(Hime.CentralDogma.Output.Unit,System.String)">
            <summary>
            Initializes this code generator
            </summary>
            <param name="unit">The unit to generate code for</param>
            <param name="binResource">Path to the automaton's binary resource</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.ParserNetCodeGenerator.WriteHeader(System.IO.StreamWriter)">
            <summary>
            Writes a generated .Net file header
            </summary>
            <param name="writer">The writer to write to</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.ParserNetCodeGenerator.Generate(System.String)">
            <summary>
            Generates code for the specified file
            </summary>
            <param name="file">The target file to generate code in</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.ParserNetCodeGenerator.GenerateCodeSymbols(System.IO.StreamWriter)">
            <summary>
            Generates the code for the symbols
            </summary>
            <param name="stream">The output stream</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.ParserNetCodeGenerator.GenerateCodeVariables(System.IO.StreamWriter)">
            <summary>
            Generates the code for the variables
            </summary>
            <param name="stream">The output stream</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.ParserNetCodeGenerator.GenerateCodeVirtuals(System.IO.StreamWriter)">
            <summary>
            Generates the code for the virtual symbols
            </summary>
            <param name="stream">The output stream</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.ParserNetCodeGenerator.GenerateCodeActions(System.IO.StreamWriter)">
            <summary>
            Generates the code for the semantic actions
            </summary>
            <param name="stream">The output stream</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.ParserNetCodeGenerator.GeneratorCodeConstructors(System.IO.StreamWriter)">
            <summary>
            Generates the code for the constructors
            </summary>
            <param name="stream">The output stream</param>
        </member>
        <member name="T:Hime.CentralDogma.Output.ParserJavaCodeGenerator">
            <summary>
            Represents a generator for parser code for the Java platform
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.ParserJavaCodeGenerator.nmespace">
            <summary>
            The nmespace of the generated code
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.ParserJavaCodeGenerator.modifier">
            <summary>
            The visibility modifier for the generated code
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.ParserJavaCodeGenerator.name">
            <summary>
            The name of the generated lexer
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.ParserJavaCodeGenerator.binResource">
            <summary>
            Path to the automaton's binary resource
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.ParserJavaCodeGenerator.grammar">
            <summary>
            The grammar to generate a parser for
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.ParserJavaCodeGenerator.parserType">
            <summary>
            The type of the parser to generate
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Output.ParserJavaCodeGenerator.#ctor(Hime.CentralDogma.Output.Unit,System.String)">
            <summary>
            Initializes this code generator
            </summary>
            <param name="unit">The unit to generate code for</param>
            <param name="binResource">Path to the automaton's binary resource</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.ParserJavaCodeGenerator.WriteHeader(System.IO.StreamWriter)">
            <summary>
            Writes a generated .Net file header
            </summary>
            <param name="writer">The writer to write to</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.ParserJavaCodeGenerator.Generate(System.String)">
            <summary>
            Generates code for the specified file
            </summary>
            <param name="file">The target file to generate code in</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.ParserJavaCodeGenerator.GenerateCodeSymbols(System.IO.StreamWriter)">
            <summary>
            Generates the code for the symbols
            </summary>
            <param name="stream">The output stream</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.ParserJavaCodeGenerator.GenerateCodeVariables(System.IO.StreamWriter)">
            <summary>
            Generates the code for the variables
            </summary>
            <param name="stream">The output stream</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.ParserJavaCodeGenerator.GenerateCodeVirtuals(System.IO.StreamWriter)">
            <summary>
            Generates the code for the virtual symbols
            </summary>
            <param name="stream">The output stream</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.ParserJavaCodeGenerator.GenerateCodeActions(System.IO.StreamWriter)">
            <summary>
            Generates the code for the semantic actions
            </summary>
            <param name="stream">The output stream</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.ParserJavaCodeGenerator.GeneratorCodeConstructors(System.IO.StreamWriter)">
            <summary>
            Generates the code for the constructors
            </summary>
            <param name="stream">The output stream</param>
        </member>
        <member name="T:Hime.CentralDogma.Output.EmitterForNet">
            <summary>
            Represents an emitter of lexer and parser for a given grammar on the .Net platform
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Output.EmitterBase">
            <summary>
            Represents a platform-agnostic emitter of lexer and parser for a given grammar
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.EmitterBase.suffixLexerData">
            <summary>
            The suffix for the emitted lexer data files
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.EmitterBase.suffixParserData">
            <summary>
            The suffix for the emitted parser data files
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.EmitterBase.suffixDebugGrammar">
            <summary>
            The suffix for the emitted debug grammar data
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.EmitterBase.suffixDebugDFA">
            <summary>
            The suffix for the emitted debug DFA data
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.EmitterBase.suffixDebugLRAsText">
            <summary>
            The suffix for the emitted debug LR graph as text
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.EmitterBase.suffixDebugLRAsDOT">
            <summary>
            The suffix for the emitted debug LR graph as DOT
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.EmitterBase.defaultCompositeAssemblyName">
            <summary>
            The default name of the assembly when it contains multiple parsers
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.EmitterBase.reporter">
            <summary>
            The reporter
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.EmitterBase.units">
            <summary>
            The units to emit artifacts for
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.EmitterBase.path">
            <summary>
            The path for the emitted artifacts
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.EmitterBase.mode">
            <summary>
            The mode of this emitter
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterBase.#ctor(System.Collections.Generic.List{Hime.CentralDogma.Output.Unit})">
            <summary>
            Initializes this emitter
            </summary>
            <param name="units">The units to emit data for</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterBase.#ctor(Hime.CentralDogma.Output.Unit)">
            <summary>
            Initializes this emitter
            </summary>
            <param name="unit">The unit to emit data for</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterBase.#ctor(Hime.CentralDogma.Reporter,System.Collections.Generic.List{Hime.CentralDogma.Output.Unit})">
            <summary>
            Initializes this emitter
            </summary>
            <param name="reporter">The reporter to use</param>
            <param name="units">The units to emit data for</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterBase.#ctor(Hime.CentralDogma.Reporter,Hime.CentralDogma.Output.Unit)">
            <summary>
            Initializes this emitter
            </summary>
            <param name="reporter">The reporter to use</param>
            <param name="unit">The unit to emit data for</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterBase.GetArtifactLexerCode(Hime.CentralDogma.Output.Unit)">
            <summary>
            Gets the full path and name for the lexer code artifact
            </summary>
            <param name="unit">The unit to emit data for</param>
            <returns>The full path and name for the lexer code artifact</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterBase.GetArtifactLexerData(Hime.CentralDogma.Output.Unit)">
            <summary>
            Gets the full path and name for the lexer data artifact
            </summary>
            <param name="unit">The unit to emit data for</param>
            <returns>The full path and name for the lexer code artifact</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterBase.GetArtifactParserCode(Hime.CentralDogma.Output.Unit)">
            <summary>
            Gets the full path and name for the parser code artifact
            </summary>
            <param name="unit">The unit to emit data for</param>
            <returns>The full path and name for the lexer code artifact</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterBase.GetArtifactParserData(Hime.CentralDogma.Output.Unit)">
            <summary>
            Gets the full path and name for the parser data artifact
            </summary>
            <param name="unit">The unit to emit data for</param>
            <returns>The full path and name for the lexer code artifact</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterBase.GetArtifactAssembly">
            <summary>
            Gets the full path and name for the assembly artifact
            </summary>
            <returns>The full path and name for the lexer code artifact</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterBase.GetArtifactDebugGrammar(Hime.CentralDogma.Output.Unit)">
            <summary>
            Gets the full path and name for the parser data artifact
            </summary>
            <param name="unit">The unit to emit data for</param>
            <returns>The full path and name for the lexer code artifact</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterBase.GetArtifactDebugDFA(Hime.CentralDogma.Output.Unit)">
            <summary>
            Gets the full path and name for the parser data artifact
            </summary>
            <param name="unit">The unit to emit data for</param>
            <returns>The full path and name for the lexer code artifact</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterBase.GetArtifactDebugLRAsText(Hime.CentralDogma.Output.Unit)">
            <summary>
            Gets the full path and name for the parser data artifact
            </summary>
            <param name="unit">The unit to emit data for</param>
            <returns>The full path and name for the lexer code artifact</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterBase.GetArtifactDebugLRAsDOT(Hime.CentralDogma.Output.Unit)">
            <summary>
            Gets the full path and name for the parser data artifact
            </summary>
            <param name="unit">The unit to emit data for</param>
            <returns>The full path and name for the lexer code artifact</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterBase.Emit(System.String,Hime.CentralDogma.Output.Mode)">
            <summary>
            Emit the lexer and parser artifacts
            </summary>
            <param name="path">The output path for the emitted artifacts</param>
            <param name="mode">The output mode</param>
            <returns><c>true</c> if this operation succeeded</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterBase.EmitBaseArtifacts(Hime.CentralDogma.Output.Unit)">
            <summary>
            Emits the base artifacts (lexer, parser and debug) for the specified unit
            </summary>
            <param name="unit">The unit to generate artifacts for</param>
            <returns><c>true</c> if this operation succeeded</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterBase.EmitDebugArtifacts(Hime.CentralDogma.Output.Unit)">
            <summary>
            Emits the debug artifacts for the lexer and parser
            </summary>
            <param name="unit">The unit to generate artifacts for</param>
            <returns><c>true</c> if this operation succeeded</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterBase.GenerateLexer(Hime.CentralDogma.Output.Unit)">
            <summary>
            Generates the lexer for the given unit
            </summary>
            <param name="unit">The unit to generate a lexer for</param>
            <returns><c>true</c> if this operation succeeded</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterBase.GenerateParser(Hime.CentralDogma.Output.Unit)">
            <summary>
            Generates the parser for the given grammar
            </summary>
            <param name="unit">The unit to generate a parser for</param>
            <returns><c>true</c> if the operation succeed</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterBase.GetLexerCodeGenerator(Hime.CentralDogma.Output.Unit)">
            <summary>
            Gets the runtime-specific generator of lexer code
            </summary>
            <param name="unit">The unit to generate a lexer for</param>
            <returns>The runtime-specific generator of lexer code</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterBase.GetParserCodeGenerator(Hime.CentralDogma.Output.Unit)">
            <summary>
            Gets the runtime-specific generator of parser code
            </summary>
            <param name="unit">The unit to generate a parser for</param>
            <returns>The runtime-specific generator of parser code</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterBase.EmitAssembly">
            <summary>
            Emits the assembly for the generated lexer and parser
            </summary>
            <returns><c>true</c> if the operation succeed</returns>
        </member>
        <member name="P:Hime.CentralDogma.Output.EmitterBase.SuffixLexerCode">
            <summary>
            Gets the suffix for the emitted lexer code files
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Output.EmitterBase.SuffixParserCode">
            <summary>
            Gets suffix for the emitted parser code files
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Output.EmitterBase.SuffixAssembly">
            <summary>
            Gets suffix for the emitted assemblies
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.EmitterForNet.rand">
            <summary>
            The global random source
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterForNet.GetUniqueID">
            <summary>
            Gets a unique identifier for generated assemblies
            </summary>
            <returns>A unique identifier</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterForNet.#ctor(System.Collections.Generic.List{Hime.CentralDogma.Output.Unit})">
            <summary>
            Initializes this emitter
            </summary>
            <param name="units">The units to emit data for</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterForNet.#ctor(Hime.CentralDogma.Output.Unit)">
            <summary>
            Initializes this emitter
            </summary>
            <param name="unit">The unit to emit data for</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterForNet.#ctor(Hime.CentralDogma.Reporter,System.Collections.Generic.List{Hime.CentralDogma.Output.Unit})">
            <summary>
            Initializes this emitter
            </summary>
            <param name="reporter">The reporter to use</param>
            <param name="units">The units to emit data for</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterForNet.#ctor(Hime.CentralDogma.Reporter,Hime.CentralDogma.Output.Unit)">
            <summary>
            Initializes this emitter
            </summary>
            <param name="reporter">The reporter to use</param>
            <param name="unit">The unit to emit data for</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterForNet.GetLexerCodeGenerator(Hime.CentralDogma.Output.Unit)">
            <summary>
            Gets the runtime-specific generator of lexer code
            </summary>
            <param name="unit">The unit to generate a lexer for</param>
            <returns>The runtime-specific generator of lexer code</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterForNet.GetParserCodeGenerator(Hime.CentralDogma.Output.Unit)">
            <summary>
            Gets the runtime-specific generator of parser code
            </summary>
            <param name="unit">The unit to generate a parser for</param>
            <returns>The runtime-specific generator of parser code</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterForNet.EmitAssembly">
            <summary>
            Emits the assembly for the generated lexer and parser
            </summary>
            <returns><c>true</c> if the operation succeed</returns>
        </member>
        <member name="P:Hime.CentralDogma.Output.EmitterForNet.SuffixLexerCode">
            <summary>
            Gets the suffix for the emitted lexer code files
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Output.EmitterForNet.SuffixParserCode">
            <summary>
            Gets suffix for the emitted parser code files
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Output.EmitterForNet.SuffixAssembly">
            <summary>
            Gets suffix for the emitted assemblies
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Output.EmitterForJava">
            <summary>
            Represents an emitter of lexer and parser for a given grammar on the Java platform
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterForJava.#ctor(System.Collections.Generic.List{Hime.CentralDogma.Output.Unit})">
            <summary>
            Initializes this emitter
            </summary>
            <param name="units">The units to emit data for</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterForJava.#ctor(Hime.CentralDogma.Output.Unit)">
            <summary>
            Initializes this emitter
            </summary>
            <param name="unit">The unit to emit data for</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterForJava.#ctor(Hime.CentralDogma.Reporter,System.Collections.Generic.List{Hime.CentralDogma.Output.Unit})">
            <summary>
            Initializes this emitter
            </summary>
            <param name="reporter">The reporter to use</param>
            <param name="units">The units to emit data for</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterForJava.#ctor(Hime.CentralDogma.Reporter,Hime.CentralDogma.Output.Unit)">
            <summary>
            Initializes this emitter
            </summary>
            <param name="reporter">The reporter to use</param>
            <param name="unit">The unit to emit data for</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterForJava.GetLexerCodeGenerator(Hime.CentralDogma.Output.Unit)">
            <summary>
            Gets the runtime-specific generator of lexer code
            </summary>
            <param name="unit">The unit to generate a lexer for</param>
            <returns>The runtime-specific generator of lexer code</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterForJava.GetParserCodeGenerator(Hime.CentralDogma.Output.Unit)">
            <summary>
            Gets the runtime-specific generator of parser code
            </summary>
            <param name="unit">The unit to generate a parser for</param>
            <returns>The runtime-specific generator of parser code</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterForJava.EmitAssembly">
            <summary>
            Emits the assembly for the generated lexer and parser
            </summary>
            <returns><c>true</c> if the operation succeed</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterForJava.CreateFolderFor(System.String,Hime.CentralDogma.Output.Unit)">
            <summary>
            Creates the physical folder for the specified unit
            </summary>
            <param name="origin">The directory to start from</param>
            <param name="unit">The unit</param>
            <returns>The resulting folder</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterForJava.CreateMavenProject">
            <summary>
            Creates the maven project to compile
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterForJava.ExportResource(System.String,System.String)">
            <summary>
            Exports the resource to the specified file
            </summary>
            <param name="name">The name of the resource to export</param>
            <param name="file">The file to export to</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.EmitterForJava.ExecuteCommand(System.String,System.String)">
            <summary>
            Executes the specified command (usually a maven command)
            </summary>
            <param name="verb">The program to execute</param>
            <param name="arguments">The arguments</param>
            <returns><c>true</c> if the command succeeded</returns>
        </member>
        <member name="P:Hime.CentralDogma.Output.EmitterForJava.SuffixLexerCode">
            <summary>
            Gets the suffix for the emitted lexer code files
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Output.EmitterForJava.SuffixParserCode">
            <summary>
            Gets suffix for the emitted parser code files
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Output.EmitterForJava.SuffixAssembly">
            <summary>
            Gets suffix for the emitted assemblies
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Output.Unit">
            <summary>
            Represent an output unit, i.e. a grammar with its compilation parameters
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.Unit.grammar">
            <summary>
            The represented grammar
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.Unit.method">
            <summary>
            The parsing method to use
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.Unit.nmspace">
            <summary>
            The namespace for the generated code
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.Unit.modifier">
            <summary>
            The access modifier for the generated code
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.Unit.dfa">
            <summary>
            The DFA to emit in a lexer
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.Unit.separator">
            <summary>
            The seperator terminal
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.Unit.expected">
            <summary>
            The terminals matched by the DFA and expected by the parser
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Output.Unit.graph">
            <summary>
            The LR graph to emit in a parser
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Output.Unit.#ctor(Hime.CentralDogma.Grammars.Grammar,Hime.CentralDogma.ParsingMethod,System.String,Hime.CentralDogma.Output.Modifier)">
            <summary>
            Initializes this unit
            </summary>
            <param name="grammar">The represented grammar</param>
            <param name="method">The parsing method to use</param>
            <param name="nmspace">The namespace for the artifacts</param>
            <param name="modifier">The modifier for the artifacts</param>
        </member>
        <member name="M:Hime.CentralDogma.Output.Unit.Prepare(Hime.CentralDogma.Reporter)">
            <summary>
            Prepare this unit for artifact generation
            </summary>
            <param name="reporter">The reporter to use</param>
            <returns><c>true</c> if the operation succeeded</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.Unit.BuildDFA(Hime.CentralDogma.Reporter)">
            <summary>
            Builds and get the DFA for this unit
            </summary>
            <param name="reporter">The reporter to use</param>
            <returns><c>true</c> if the operation succeed</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.Unit.CheckDFAWellformedness(Hime.CentralDogma.Reporter)">
            <summary>
            Checks the wellformed-ness of the DFA
            </summary>
            <param name="reporter">The reporter to use</param>
            <returns><c>true</c> if everything is OK</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.Unit.CheckSeparatorAxiom(Hime.CentralDogma.Reporter)">
            <summary>
            Checks the wellformed-ness of the Separator axiom against the DFA
            </summary>
            <param name="reporter">The reporter to use</param>
            <returns><c>true</c> if everything is OK</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.Unit.CheckRulesAgainstExpectedTerminals(Hime.CentralDogma.Reporter)">
            <summary>
            Checks the wellformed-ness of the syntactic rules against the DFA
            </summary>
            <param name="reporter">The reporter to use</param>
            <returns><c>true</c> if everything is OK</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.Unit.GetSupercedingsOf(Hime.CentralDogma.Automata.DFA,Hime.CentralDogma.Grammars.Terminal)">
            <summary>
            Gets all the superceding terminals of the specified one in a DFA
            </summary>
            <param name="dfa">A DFA</param>
            <param name="terminal">A terminal</param>
            <returns>All terminals that supercedes the specified one at least once</returns>
        </member>
        <member name="M:Hime.CentralDogma.Output.Unit.BuildGraph(Hime.CentralDogma.Reporter)">
            <summary>
            Builds and gets the graph.
            </summary>
            <param name="reporter">The reporter to use</param>
            <returns><c>true</c> if the operation succeed</returns>
        </member>
        <member name="P:Hime.CentralDogma.Output.Unit.Name">
            <summary>
            Gets the unit's name
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Output.Unit.Grammar">
            <summary>
            Gets the represented grammar
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Output.Unit.Method">
            <summary>
            Gets the associated parsing method to generate code against
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Output.Unit.Namespace">
            <summary>
            Gets the namespace to use for the generated code
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Output.Unit.Modifier">
            <summary>
            Gets the visibility modifier to use for the generated code
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Output.Unit.DFA">
            <summary>
            Gets the DFA for this unit
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Output.Unit.Separator">
            <summary>
            Gets the separator terminal for the associated lexer
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Output.Unit.Expected">
            <summary>
            Gets the expected terminals produced by the associated lexer
            </summary>
        </member>
        <member name="P:Hime.CentralDogma.Output.Unit.Graph">
            <summary>
            Gets the LR graph for the associated parser
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Input.CommandLineLexer">
            <summary>
            Represents a lexer
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.CommandLineLexer.automaton">
            <summary>
            The automaton for this lexer
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.CommandLineLexer.terminals">
            <summary>
            The collection of terminals matched by this lexer
            </summary>
            <remarks>
            The terminals are in an order consistent with the automaton,
            so that terminal indices in the automaton can be used to retrieve the terminals in this table
            </remarks>
        </member>
        <member name="M:Hime.CentralDogma.Input.CommandLineLexer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the lexer
            </summary>
            <param name="input">The lexer's input</param>
        </member>
        <member name="M:Hime.CentralDogma.Input.CommandLineLexer.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the lexer
            </summary>
            <param name="input">The lexer's input</param>
        </member>
        <member name="T:Hime.CentralDogma.Input.CommandLineLexer.ID">
            <summary>
            Contains the constant IDs for the terminals for this lexer
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.CommandLineLexer.ID.ARG_VALUE_NAME">
            <summary>
            The unique identifier for terminal ARG_VALUE_NAME
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.CommandLineLexer.ID.ARG_VALUE_NUMBER">
            <summary>
            The unique identifier for terminal ARG_VALUE_NUMBER
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.CommandLineLexer.ID.WHITE_SPACE">
            <summary>
            The unique identifier for terminal WHITE_SPACE
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.CommandLineLexer.ID.ARG_NAME">
            <summary>
            The unique identifier for terminal ARG_NAME
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.CommandLineLexer.ID.ARG_VALUE_QUOTE">
            <summary>
            The unique identifier for terminal ARG_VALUE_QUOTE
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Input.CommandLineParser">
            <summary>
            Represents a parser
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.CommandLineParser.variables">
            <summary>
            The collection of variables matched by this parser
            </summary>
            <remarks>
            The variables are in an order consistent with the automaton,
            so that variable indices in the automaton can be used to retrieve the variables in this table
            </remarks>
        </member>
        <member name="F:Hime.CentralDogma.Input.CommandLineParser.virtuals">
            <summary>
            The collection of virtuals matched by this parser
            </summary>
            <remarks>
            The virtuals are in an order consistent with the automaton,
            so that virtual indices in the automaton can be used to retrieve the virtuals in this table
            </remarks>
        </member>
        <member name="M:Hime.CentralDogma.Input.CommandLineParser.#ctor(Hime.CentralDogma.Input.CommandLineLexer)">
            <summary>
            Initializes a new instance of the parser
            </summary>
            <param name="lexer">The input lexer</param>
        </member>
        <member name="T:Hime.CentralDogma.Input.CommandLineParser.ID">
            <summary>
            Contains the constant IDs for the variables and virtuals in this parser
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.CommandLineParser.ID.value">
            <summary>
            The unique identifier for variable value
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.CommandLineParser.ID.argument">
            <summary>
            The unique identifier for variable argument
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.CommandLineParser.ID.values">
            <summary>
            The unique identifier for variable values
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.CommandLineParser.ID.arguments">
            <summary>
            The unique identifier for variable arguments
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.CommandLineParser.ID.line">
            <summary>
            The unique identifier for variable line
            </summary>
        </member>
        <member name="F:Hime.CentralDogma.Input.CommandLineParser.ID._Axiom_">
            <summary>
            The unique identifier for variable _Axiom_
            </summary>
        </member>
        <member name="T:Hime.CentralDogma.Input.CommandLine">
            <summary>
            Contains utilities for the manipulation of command line arguments
            </summary>
        </member>
        <member name="M:Hime.CentralDogma.Input.CommandLine.ParseArguments(System.String[])">
            <summary>
            Parses the command line arguments
            </summary>
            <param name="args">The command line arguments</param>
            <returns>The parsed line as an AST, or null if the parsing failed</returns>
        </member>
        <member name="M:Hime.CentralDogma.Input.CommandLine.GetValue(Hime.Redist.ASTNode)">
            <summary>
            Gets the value of the given parsed argument
            </summary>
            <param name="argument">A parsed argument</param>
            <returns>The corresponding value, or null if there is none</returns>
        </member>
        <member name="M:Hime.CentralDogma.Input.CommandLine.GetValues(Hime.Redist.ASTNode)">
            <summary>
            Gets the values of the given parsed argument
            </summary>
            <param name="argument">A parsed argument</param>
            <returns>The corresponding values</returns>
        </member>
    </members>
</doc>
