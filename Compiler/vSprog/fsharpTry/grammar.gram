grammar vSprogGrammar{

  options{
    Axiom         = "Program";
    Separator     = "SEPARATOR";
  }

  terminals{
    NEW_LINE      -> U+000D | U+000A | U+000D U+000A | U+2028 |  U+2029;
    WHITE_SPACE   -> U+0020 | U+0009 | U+000B | U+000C;
    COMMENT_LINE  -> '//' (.* - (.* NEW_LINE .*)) NEW_LINE;
    COMMENT_BLOCK -> '/*' (.* - (.* '*/' .*)) '*/';
    SEPARATOR     -> (NEW_LINE | WHITE_SPACE| COMMENT_LINE | COMMENT_BLOCK)+;

    /*--------- Keywords ---------*/
    LET           -> 'let';
    WAIT          -> 'wait';
    ACTOR         -> 'actor';
    RECEIVE       -> 'receive';
    SEND          -> 'send';
    SPAWN         -> 'spawn';
    VAR           -> 'var';
    WHILE         -> 'while';
    FOR           -> 'for';
    STRUCT        -> 'struct';
    RETURN        -> 'return';
    PRIMITIVE     -> 'int' | 'real' | 'char' | 'bool';

    IDENTIFIER    -> [a-zA-Z_][a-zA-Z_0-9]*-(LET | VAR | PRIMITIVE | STRUCT | ACTOR | RECEIVE | SEND | SPAWN | WAIT | RETURN);

    /*--------- Symbols ---------*/
    EQUALS        -> '=';
    ASSIGN        -> ':=';
    LPARENS       -> '(';
    RPARENS       -> ')';
    STARTTUPLE    -> '<';
    ENDTUPLE      -> '>';
    LEADSTO       -> '->';
    COLON         -> ':';
    BLOCKSTART    -> '{';
    BLOCKEND      -> '}';
    DOT           -> '.';
    SEMICOLON     -> ';';
    STARTLIST     -> '[';
    ENDLIST       -> ']';
    COMMA         -> ',';
    TO            -> '..';

    PZEROOPERATOR -> '*' | '/' | '%';
    PONEOPERATOR  -> '+' | '-';

    /*--------- Numbers ---------*/
    INT           -> [1-9][0-9]* | '0';
    REAL          -> ([0-9]+'.'[0-9]+)|([0-9]+'.')|('.'([0-9])+);
    NUMBER        -> INT | REAL;

    /*--------- Chars ---------*/
    STRING        -> '"'[a-zA-Z_0-9]*'"';
    CHAR          -> '\''[a-zA-Z_0-9]|' ''\'';
  }

  rules{
    /*--------- Program ---------*/
    Program          -> Body^;

    Body             -> Body SEMICOLON! Line
                      | Body SEMICOLON!
                      | Line;

    Line             -> Expression;

    /*--------- Expression ---------*/
    Expression       -> Assignment
                      | Declaration
                      | Operation
		      | Spawn
		      | Return;
                      //| If
                      //| For
                      //| Match;

    Spawn            -> LET IDENTIFIER COLON IDENTIFIER ASSIGN SPAWN IDENTIFIER Operation 
    		      | VAR IDENTIFIER COLON IDENTIFIER ASSIGN SPAWN IDENTIFIER Operation;
    //Send	     -> SEND IDENTIFIER Operation;

    /*--------- Return ---------*/
    Return           -> RETURN Operation;

    /*--------- Wait ---------*/
    Wait             -> WAIT Types;

    /*--------- Recieve ---------*/
    Recieve          -> RECEIVE Types;

    /*--------- Block ---------*/
    Block            -> BLOCKSTART Body BLOCKEND
                      | BLOCKSTART BLOCKEND;

    /*--------- Operation ---------*/
    Operation        -> Operation PONEOPERATOR^ Factor
                      | Factor^;
    Factor           -> Factor PZEROOPERATOR^ Term
                      | Term^;
    Term             -> Operand
                      | LPARENS! Operation^ RPARENS!;
    Operand	     -> Block
    		      | NUMBER
		      | IDENTIFIER
		      | Literals
		      | Invocation;
		      
    Literals         -> STRING
    		      | List
		      | Tuple;
		      
    Invocation       -> IDENTIFIER LPARENS Ids? RPARENS;

    /*--------- Assignment ---------*/
    Assignment       -> Assignable ASSIGN Operation;

    /*--------- Assignable ---------*/
    Assignable       -> SimpleAssignable;

    /*--------- SimpleAssignable ---------*/
    SimpleAssignable -> DecoratedID;

    /*--------- Declaration ---------*/
    Declaration      -> Struct
    		      | Actor
                      | Initialisation^
                      | TypeDecl;

    Struct           -> STRUCT IDENTIFIER ASSIGN BLOCKSTART TypeDecls BLOCKEND;
    Actor            -> ACTOR DecoratedID ASSIGN^ Operation;
    TypeDecls        -> TypeDecls SEMICOLON TypeDecl
                      | TypeDecl;
		      
    Initialisation   -> LET DecoratedID ASSIGN! Operation
                      | VAR DecoratedID ASSIGN^ Operation;

    DecoratedID     -> IDENTIFIER LPARENS! Ids? RPARENS! COLON! Types
                      | TypeDecl^
                      | IDENTIFIER;
		      
    Ids              -> IDENTIFIER COMMA Ids
                      | IDENTIFIER;
    TypeDecl         -> IDENTIFIER^ COLON! Types;

    /*-------- Type ---------*/
    Types            -> Types LEADSTO Type
                      | Type^;
    Type             -> PRIMITIVE^
                      | IDENTIFIER
                      | STARTLIST Types ENDLIST
                      | LPARENS Types RPARENS;

    /*--------- List ---------*/
    List             -> STARTLIST ListParams ENDLIST;
    ListParams       ->	ListParams COMMA ListParams
    		      | Operation TO Operation
                      | Operation;

    /*--------- Tuple ---------*/
    Tuple            -> LPARENS Body RPARENS;

    /*--------- Accessor ---------*/

    Accessor         -> DOT IDENTIFIER
                      | DOT STARTLIST NUMBER ENDLIST
		      | DOT IDENTIFIER Accessor;

    

    /*--------- ForLoop ---------*/
    //ForLoop          -> FOR LPARENS 'blabla' SEMICOLON expression SEMICOLON expression RPARENS ASSIGN Block
    //ForLoop          ->
  }
}
