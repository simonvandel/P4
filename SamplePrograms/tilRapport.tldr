actor main := {
  receive arguments:args := {
    let msg1:realInputMsg := (x := 2.5; y := 2.5;);
    let msg2:intInputMsg := (x := 50; y := 100;);
    let plusser:plusActor := spawn plusActor;
    let list:[int] := [0];
    send plusser msg1;
    send plusser msg2;
    die;
  };
};

actor plusActor := {
  var messagesReceived:int := 0;
  let messagesToReceive:int := 2;

  receive rMsg:realInputMsg := {
    messagesReceived := messagesReceived + 1;
    let x1:real := rMsg.x;
    let y1:real := rMsg.y;
    let realRes:real := x1 + y1;
    let printer1:printActor := spawn printActor realRes;
    if(messagesReceived = messagesToReceive) { 
      die;
    };
  };

  receive iMsg:intInputMsg := {
    messagesReceived := messagesReceived + 1;
    let x2:int := iMsg.x;
    let y2:int := iMsg.y;
    let intRes:int := x2 + y2;
    let printer2:printActor := spawn printActor intRes;
    if(messagesReceived = messagesToReceive) { 
      die;
    };
  };
};

actor printActor := {
  receive intMsg:int := {
    printint(intMsg);
    die;
  };

  receive realMsg:real := {
    printreal(realMsg);
    die;
  };
};

struct realInputMsg := {
  x:real;
  y:real;
};

struct intInputMsg := {
  x:int;
  y:int;
};